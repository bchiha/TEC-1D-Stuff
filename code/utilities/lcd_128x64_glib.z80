		ORG 3000H
		
;Port 4 on TEC is connected to LCD Enable
;A7 is connected to  Register select.  A7=0 for Instruction, A7=1 for Data
LCD_IR:	EQU 04H
LCD_DR:	EQU 84H 		;A7 is Data Register
V_DELAY_US:	EQU 0004H 		;Delay for 76us on your system
		
; Jump Table
;-----------
		
		JP INIT_LCD
		JP CLEAR_GBUF
		JP CLEAR_GR_LCD
		JP CLEAR_TXT_LCD
		JP SET_GR_MODE
        JP SET_TXT_MODE
		JP DRAW_BOX
		JP DRAW_LINE
        JP DRAW_CIRCLE
		JP DRAW_PIXEL
		JP PLOT_TO_LCD
		JP PRINT_STRING
		JP PRINT_CHARS
		JP DELAY_US
		JP DELAY_MS
		JP SET_BUF_CLEAR
		JP SET_BUF_NO_CLEAR
		
; Initialise LCD
INIT_LCD:	
		LD HL, INIT_BASIC ;POINT HL TO LCD INITIALIZE TABLE
		LD BC, 0404H 	;B=4 BYTES, C=PORT 4
NEXT_CMD:	
		CALL DELAY_US
		OUTI 			;OUTPUT (HL) TO (C). HL=HL+1,B=B-1
		JR NZ, NEXT_CMD
		LD DE, 0140H 	;1.6 ms
		CALL DELAY_MS
		
		CALL CLEAR_GR_LCD
		
; Clears the Graphics Memory Buffer
CLEAR_GBUF:	
		LD HL, GBUF
		LD DE, GBUF + 1
		XOR A
		LD (HL), A
		LD BC, 03FFH
		LDIR
		RET
		
; Clears the Graphics LCD Buffer
CLEAR_GR_LCD:
		CALL SET_GR_MODE
		LD B, 00H
CLR_X:	
		LD C, 00H
CLR_Y:	
		LD A, 80H
		OR C
		OUT (LCD_IR), A
		CALL DELAY_US
		LD A, 80H
		OR B
		OUT (LCD_IR), A
		CALL DELAY_US
		XOR A
		OUT (LCD_DR), A
		CALL DELAY_US
		OUT (LCD_DR), A
		CALL DELAY_US
		INC C
		LD A, C
		CP 20H
		JR NZ, CLR_Y
		INC B
		LD A, B
		CP 10H
		JR NZ, CLR_X
		RET
		
; Clears the ASCII Text LCD
CLEAR_TXT_LCD:
		CALL SET_TXT_MODE
		LD A, 80H
		OUT (LCD_IR), A
		CALL DELAY_US
		LD B, 40H
CLR_ROWS:	
		LD A,  " "
		OUT (LCD_DR), A
		CALL DELAY_US
		DJNZ CLR_ROWS
		RET
		
; Set Graphics Mode
SET_GR_MODE:
		LD A, 34H
		OUT (LCD_IR), A
		CALL DELAY_US
		LD A, 36H
		OUT (LCD_IR), A
		JP DELAY_US
		
; Set Text Mode
SET_TXT_MODE:
		LD A, 30H
		OUT (LCD_IR), A
		JP DELAY_US

;Draw Box
;Inputs: BC = X0,Y0
;        DE = X1,Y1
;Destroys: HL
DRAW_BOX:	
		PUSH BC
TOP:	
		CALL DRAW_PIXEL
		LD A, D
		INC B
		CP B
		JR NC, TOP
		POP BC
		
		PUSH BC
		LD C, E
BOTTOM:	
		CALL DRAW_PIXEL
		LD A, D
		INC B
		CP B
		JR NC, BOTTOM
		POP BC
		
		PUSH BC
LEFT:	
		CALL DRAW_PIXEL
		LD A, E
		INC C
		CP C
		JR NC, LEFT
		POP BC
		
		PUSH BC
		LD B, D
RIGHT:	
		CALL DRAW_PIXEL
		LD A, E
		INC C
		CP C
		JR NC, RIGHT
		POP BC
		RET
		
;Draw a line between two points using Bresenham Line Algorithm
; void plotLine(int x0, int y0, int x1, int y1)
; {
;    int dx =  abs(x1-x0), sx = x0<x1 ? 1 : -1;
;    int dy = -abs(y1-y0), sy = y0<y1 ? 1 : -1;
;    int err = dx+dy, e2; /* error value e_xy */
		
;    for(;;){  /* loop */
;       setPixel(x0,y0);
;       if (x0==x1 && y0==y1) break;
;       e2 = 2*err;
;       if (e2 >= dy) { err += dy; x0 += sx; } /* e_xy+e_x > 0 */
;       if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
;    }
; }
;Inputs: BC = X0,Y0
;        DE = X1,Y1
DRAW_LINE:	
		
;sx = x0<x1 ? 1 : -1
		LD H, 01H
		LD A, B
		CP D
		JR C, $ + 4
		LD H, 0FFH
		LD A, H
		LD (SX), A
		
;sy = y0<y1 ? 1 : -1
		LD H, 01H
		LD A, C
		CP E
		JR C, $ + 4
		LD H, 0FFH
		LD A, H
		LD (SY), A
		
		ld (ENDPT), DE
		
;dx =  abs(x1-x0)
		PUSH BC
		LD L, D
		LD H, 0
		LD C, B
		LD B, 0
		OR A
		SBC HL, BC
		CALL ABSHL
		LD (DX), HL
		POP BC
		
;dy = -abs(y1-y0)
		PUSH BC
		LD L, E
		LD H, 0
		LD B, 0
		OR A
		SBC HL, BC
		CALL ABSHL
		XOR A
		SUB L
		LD L, A
		SBC A, A
		SUB H
		LD H, A
		LD (DY), HL
		POP BC
		
;err = dx+dy,
		LD DE, (DX)
		ADD HL, DE
		LD (ERR), HL
		
LINE_LOOP:	
;setPixel(x0,y0)
		CALL DRAW_PIXEL
		
;if (x0==x1 && y0==y1) break;
		LD A, (ENDPT + 1)
		CP B
		JR NZ, $ + 7
		LD A, (ENDPT)
		CP C
		RET Z
		
;e2 = 2*err;
		LD HL, (ERR)
		ADD HL, HL 		;E2
		
;if (e2 >= dy)  err += dy; x0 += sx;
		LD DE, (DY)
		OR A
		SBC HL, DE
		ADD HL, DE
		JP M, LL2
		
		PUSH HL
		LD HL, (ERR)
		ADD HL, DE
		LD (ERR), HL
		LD A, (SX)
		ADD A, B
		LD B, A
		POP HL
		
LL2:	
;if (e2 <= dx)  err += dx; y0 += sy;
		LD DE, (DX)
		OR A
		SBC HL, DE
		ADD HL, DE
		JR Z, LL3
		JP P, LINE_LOOP
LL3:	
		LD HL, (ERR)
		ADD HL, DE
		LD (ERR), HL
		LD A, (SY)
		ADD A, C
		LD C, A
		
		JR LINE_LOOP
		
ABSHL:	
		BIT 7, H
		RET Z
		XOR A
		SUB L
		LD L, A
		SBC A, A
		SUB H
		LD H, A
		RET

;Draw a circle from a midpoint to a radius using Bresenham Line Algorithm
; void plotCircle(int xm, int ym, int r)
; {
;    int x = -r, y = 0, err = 2-2*r, i = 0; /* II. Quadrant */ 
;    printf("Midpoint = (%X,%X), Radius = %X\n", xm, ym, r);
;    do {
;       printf("(%X,%X) ", xm-x, ym+y); /*   I. Quadrant */
;       printf("(%X,%X) ", xm-y, ym-x); /*  II. Quadrant */
;       printf("(%X,%X) ", xm+x, ym-y); /* III. Quadrant */
;       printf("(%X,%X) ", xm+y, ym+x); /*  IV. Quadrant */
;       r = err;
;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
;       printf("x = %d, r = %d, y = %d, err =%d\n", x, r, y, err);
;    } while (x < 0);
; }
;Inputs BC = xm,ym (Midpoint)
;       E = radius
DRAW_CIRCLE:
;   int x = -r, err = 2-2*r; /* II. Quadrant */
    XOR A
    SUB E
    LD (SX),A  ;x
;   y = 0
    XOR A
    LD (SY),A  ;y
;   RAD = r    
    LD D,00H
    LD A,E
    LD (RAD),DE ;r
;   err = 2-2*r    
    EX DE,HL
    ADD HL,HL
    EX DE,HL
    LD HL,0002H
    OR A
    SBC HL,DE  ;err
    LD (ERR),HL

CIRCLE_LOOP:
;       setPixel(xm-x, ym+y); /*   I. Quadrant */
    PUSH BC
    LD A,(SX)
    NEG
    ADD A,B
    LD B,A
    LD A,(SY)
    ADD A,C
    LD C,A
    CALL SETXY
    POP BC
;       setPixel(xm+x, ym-y); /* III. Quadrant */
    PUSH BC
    LD A,(SX)
    ADD A,B
    LD B,A
    LD A,(SY)
    NEG
    ADD A,C
    LD C,A
    CALL SETXY
    POP BC
;       setPixel(xm-y, ym-x); /*  II. Quadrant */
    PUSH BC
    LD A,(SY)
    NEG
    ADD A,B
    LD B,A
    LD A,(SX)
    NEG
    ADD A,C
    LD C,A
    CALL SETXY
    POP BC
;       setPixel(xm+y, ym+x); /*  IV. Quadrant */
    PUSH BC
    LD A,(SY)
    ADD A,B
    LD B,A
    LD A,(SX)
    ADD A,C
    LD C,A
    CALL SETXY
    POP BC
;       r = err;
    LD HL,(ERR)
    LD (RAD),HL
;       if (r <= y) err += ++y*2+1;           /* e_xy+e_y < 0 */
    LD A,(SY)
    LD E,A
    LD D,0
    OR A
    LD HL,(RAD)
    SBC HL,DE
    ADD HL,DE
    JP P,DS1
    LD A,(SY)
    INC A
    LD (SY),A
    ADD A,A
    INC A
    LD E,A
    LD D,0
    LD HL,(ERR)
    ADD HL,DE
    LD (ERR),HL
;       if (r > x || err > y) err += ++x*2+1; /* e_xy+e_x > 0 or no 2nd y-step */
DS1:
    LD HL,(RAD)
    LD A,(SX)
    LD D,00H
    LD E,A
    BIT 7,E
    JR Z,$+3
    DEC D
    OR A
    SBC HL,DE
    ADD HL,DE
    JP P, DS2
    LD HL,(ERR)
    LD A,(SY)
    LD D,0
    LD E,A
    OR A
    SBC HL,DE
    ADD HL,DE
    JR NC,DS3
DS2:
    LD A,(SX)
    INC A
    LD (SX),A
    ADD A,A
    INC A
    LD E,A
    LD D,0
    LD HL,(ERR)
    ADD HL,DE
    LD (ERR),HL

;   } while (x < 0);
DS3:
    LD A,(SX)
    OR A
    JP NZ,CIRCLE_LOOP
    RET

;Draw Pixel in position X Y
;Input B = column/X (0-127), C = row/Y (0-63)
;destroys HL
DRAW_PIXEL:	
		LD A, C
		CP 40H
		RET NC
		LD A, B
		CP 80H
		RET NC
		
		PUSH DE
		LD L, C
		LD H, 00H
		ADD HL, HL
		ADD HL, HL
		ADD HL, HL
		ADD HL, HL
		LD DE, GBUF - 1
		ADD HL, DE
		
		LD A, B
		LD D, 08H
BASE_COL:	
		INC HL
		SUB D
		JR NC, BASE_COL
		
		CPL
		LD D, 01H
		OR A
		JR Z, UPD_GBUF
SHIFT_BIT:	
		SLA D
		DEC A
		JR NZ, SHIFT_BIT
		
UPD_GBUF:	
		LD A, D
		OR (HL)
		LD (HL), A
		POP DE
		RET
		
;Main draw routine.  Moves GBUF to LCD and clears buffer
;Destroys all
PLOT_TO_LCD:	
		LD HL, GBUF
		LD C, 80H
PLOT_ROW:	
		LD A, C
		AND 9FH
		OUT (LCD_IR), A ;Vertical
		CALL DELAY_US
		LD A, 80H
		BIT 5, C
		JR Z, $ + 4
		OR 08H
		OUT (LCD_IR), A ;Horizontal
		CALL DELAY_US
		
		LD B, 10H 		;send eight double bytes (16 bytes)
PLOT_COLUMN:	
		LD A, (HL)
		OUT (LCD_DR), A ;Byte 1
		LD A, (CLRBUF)
		OR A
		JR Z, $ + 4
		LD (HL), 00H
		CALL DELAY_US
		INC HL
		DJNZ PLOT_COLUMN
		INC C
		BIT 6, C 		;Is Row = 64?
		JR Z, PLOT_ROW
		RET
		
; Print ASCII text on a given row
; Inputs: A = 0 to 3 Row Number
;         DB "String" on next line, terminate with 0
; EG:
;   LD A,2
;   CALL PRINT_STRING
;   DB "This Text",0
;
PRINT_STRING:	
		LD B, A
		CALL SET_TXT_MODE
		LD HL, ROWS
		LD A, B
		ADD A, L
		JR NC, $ + 3
		INC H
		LD L, A
		LD A, (HL)
		OUT (LCD_IR), A
		CALL DELAY_US
		
		POP HL
DS_LOOP:	
		LD A, (HL)
		INC HL
		OR A
		JR Z, DS_EXIT
		OUT (LCD_DR), A
		CALL DELAY_US
		JR DS_LOOP
DS_EXIT:	
		JP (HL)

;Print Characters at a position X,Y
;Input B = column/X (0-15), C = row/Y (0-3)
;      HL = Start address of text to display, terminate with 0
PRINT_CHARS:
        RET ;TODO
		
; Delay for LCD write
DELAY_US:	
		LD DE, V_DELAY_US ;DELAY BETWEEN, was 0010H
DELAY_MS:	
		DEC DE 			;EACH BYTE
		LD A, D 		;AS PER
		OR E 			;LCD MANUFACTER'S
		JR NZ, DELAY_MS ;INSTRUCTIONS
		RET
		
; Set Buffer Clearing after outputting to LCD
; Input: A = 0 Buffer to be cleared, A <> 0 Buffer kept
SET_BUF_CLEAR:	
		LD A,0FFH
        LD (CLRBUF), A
		JP Z, CLEAR_GBUF

SET_BUF_NO_CLEAR:
        XOR A
		LD (CLRBUF), A
		RET

; Contstants
ROWS:	DB      80H,90H,88H,98H ;Text Row start position
		
INIT_BASIC:	
		DB      30H             ;8 Bit interface, basic instruction
		DB      0CH             ;display on, cursor & blink off
		DB      06H             ;cursor move to right ,no shift
		DB      01H             ;clear RAM
		
; RAM Locations
;---------------
		
GBUF:	DS 0400H 		;16 * 64 = 1024 byte
ENDPT:	DW 0000H
SX:		DB 00H
SY:		DB 00H
DX:		DW 0000H
DY:		DW 0000H
ERR:	DW 0000H
RAD:    DW 0000H
CLRBUF:	DB 00H
