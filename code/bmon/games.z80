; TEC GAMES
; ---------
;
; These games can be used on the TEC with no add ons.  They are coded
; to be used inconjuction with BMON and running at 4MHz
;
            ORG    18E0H 
GAMES:
            ; Copy Menu Data to JMON location
            LD      HL,M_DATA ; Menu data
            LD      DE,3F8DH ; Destination for menu/perimiter to use
            LD      BC,000BH ; Number of bytes to copy
            LDIR     ; Copy it
MENU:
            JP      0041H ; Call the menu

; Segment Game by Jim Robinson
; This game the player is to press any key when a moving target is in 
; the bottom segment on the 3rd LED segment from the right.  On each 
; hit the moving segment restarts and moves faster.
;
;    A D D R E S S       D A T A
;  --   --   --   --     --   --
; |  | |  | |  | |  |   |  | |  |
;  --   --   --   --     --   --
; |  | |  | |  | |  |   |  | |  |
;  --   --   --   --     --   --
;                 ^^
;                 ||
;          This segment lit up

SEGHIT:

SEGSCORE:   EQU     3D00H ;Score in HEX              (1-byte)
SEGSPEED:   EQU     3D01H ;Speed variable            (1-byte)

            LD      DE,0A000H 
            LD      (SEGSPEED),DE  ;Initial Speed
            XOR     A 
            LD      (SEGSCORE),A   ;Initial Score is 0
SH1:
            LD      HL,SEGDTBL  ;Segment table lookup
SH2:
            LD      A,(HL) 
            LD      B,A         ;LED to Use
            INC     HL 
            LD      A,(HL) 
            LD      C,A         ;Segment to Use
            INC     HL 
            LD      A,B         ;Check if last segment which is 0xFF
            CP      0FFH        ;Its game over if zero
            JR      Z,SH6 
            OUT     (01),A      ;Light up LED and Segment
            LD      A,C 
            OUT     (02),A 
            CALL    SH3      ;Delay the movement
            CALL    SH5      ;Check for key hit
            CP      12H      ;If segment is hit, KEYCHK returns 12H in A register
            JR      Z,SH1   ;Reset Segments and do it again
            JR      SH2      ;Display next Segment
SH3: 
            LD      DE,(SEGSPEED) 
SH4:        DEC     DE 
            LD      A,D 
            OR      A           ;Check if 0 
            RET     Z           ;Delay is done, exit
            JR      SH4         ;Keep decreasing to delay
SH5: 
            RST     20H         ;JMON No Wait Key handler that sets key if pressed
            RET     NZ          ;Return if no key hit
            LD      A,B         ;Check if LED is on Third from RIGHT 
            CP      04H 
            RET     NZ          ;Exit if not
            LD      A,C         ;Check if Bottom Segment is LIT
            CP      80H  
            RET     NZ          ;Exit if not

            LD      A,(SEGSCORE)   ;Update Score
            INC     A
            DAA                 ;Adjust for BCD addition 
            LD      (SEGSCORE),A   ;Save Score

            LD      C,A         ;Save for Scan
            CALL    SH7        ;Display Score
            LD      DE,(SEGSPEED)  ;Load Speed
            DEC     D           ;Reduce Speed by 1 
            DEC     D           ;Reduce Speed by 1 
            LD      (SEGSPEED),DE  
            LD      A,12H       ;Tell main loop that segment was hit to reset segments 
            RET
SH6:      
            LD      DE,0FF00H    ;Some random address 
            LD      (SEGSPEED),DE  ;Set it to Speed (assume FF)
            LD      A,0BFH 
            OUT     (01),A      ;Light up all LEDS and speaker
            LD      A,85H 
            OUT     (02),A      ;Light up horizontal segments only 
            CALL    SH3 
            JP      0041H       ;Quit
SH7:        LD      B,80H       ;Multiplex
SH8:        PUSH    BC
            XOR     A           
            OUT     (02),A
            LD      A,01H
            OUT     (01),A
            LD      A,C
            CALL    SH11
            LD      B,00H
SH9:        DJNZ    SH9
            XOR     A
            OUT     (02),A
            LD      A,02H
            OUT     (01),A
            LD      A,C
            RRCA
            RRCA
            RRCA
            RRCA
            CALL    SH11
            LD      B,00H
SH10:       DJNZ    SH10
            XOR     A
            OUT     (01),A
            POP     BC
            DJNZ    SH8
            RET
SH11:
            AND     0FH        ;Mask high nibble
            LD      HL,SEGTBL
            ADD     A,L
            LD      L,A
            LD      A,(HL)     ;Get Segment
            OUT     (02),A     ;Display number
            RET

            ;Data for Segments, First Byte is LED to select (Port 1),
            ;and second byte is Segment to light up (Port 2)
SEGDTBL:    DB      20H,01H,10H,01H,08H,01H,04H,01H
            DB      04H,08H,04H,04H,08H,04H,10H,04H
            DB      20H,04H,20H,40H,20H,80H,10H,80H
            DB      08H,80H,04H,80H,02H,80H,01H,80H,0FFH
SEGTBL:     DB      0EBH,28H,0CDH,0ADH,2EH,0A7H,0E7H,29H,0EFH,2FH

SIMON:
;SIMON Game written by Jim Robertson
;-----------------------------------
; The 4 LED Segments from the right represent keys 0,4,8,C.
; The segments light up and the order they light up represents the
; keys to press.
;
; Modified by B Chiha to auto populate random numbers at startup.
;
            CALL    SMRAND      ;Set up random numbers from 3B00 to 3BFF
            LD      A,R         ;Get random number for random table lookup
            LD      L,A         ;at 3Bxx
SM1:
            LD      C,01H
            CALL    SM12
            LD      H,3BH
SM2:
            LD      B,C         ;Working counter
            PUSH    HL
SM3:
            LD      A,(HL)      ;Get Random value
            CALL    SM15
            INC     L
            CALL    SM12       ;Call delay which shortens on each call
            DJNZ    SM3
            POP     HL
            LD      B,C
            PUSH    HL
SM4:
            CALL    SM18
            JR      NZ,SM4   ;No key pressed
            RRCA                ;Check for keys 0,4,8,C by shifting
            RRCA                ;twice to the right..Clever!
            CP      04H         ;Compare with 4 to see if valid key
            JR      NC,SM4
            PUSH    HL
            LD      HL,SMTBL   ;Display Table
            ADD     A,L
            LD      L,A
            LD      A,(HL)      ;Get display value based on key press
            POP     HL
            CP      (HL)        ;Complare key pressed with value in lookup
            JR      NZ,SM6
            CALL    SM15
            INC     L
SM5:
            CALL    SM18    ;Get another key
            JR      Z,SM5   ;Loop until key released
            DJNZ    SM4
            POP     HL
            CALL    SM12
            INC     C
            JR      SM2        ;Jump back to start of game
SM6:
            LD      A,30H       ;Incorrect answer
            CALL    SM15
            LD      B,C
            XOR     A
SM7:
            INC     A
            DAA
            DJNZ    SM7
            DEC     A
            DAA
            LD      C,A
SM8:        XOR     A           ;Multiplex
            OUT     (02),A
            LD      A,04H
            OUT     (01),A
            LD      A,C
            CALL    SM11
            LD      B,00H
SM9:        DJNZ    SM9
            XOR     A
            OUT     (02),A
            LD      A,08H
            OUT     (01),A
            LD      A,C
            RRCA
            RRCA
            RRCA
            RRCA
            CALL    SM11
            LD      B,00H
SM10:       DJNZ    SM10
            CALL    SM18
            INC     D
            CP      12H        ;Check if GO pressed
            JR      NZ,SM8    ;Keep scanning until GO pressed
            LD      L,D        ;Put random number in L
            XOR     A
            OUT     (01),A
            CALL    SM15
            JR      SM1
SM11:
            AND     0FH        ;Mask high nibble
            LD      HL,SEGTBL
            ADD     A,L
            LD      L,A
            LD      A,(HL)     ;Get Segment
            OUT     (02),A     ;Display number
            RET
SM12:
            LD      DE,8000H
            LD      A,C        ;Frame count
            RLCA
            RLCA
SM13:
            DEC     D
            DEC     A
            JR      NZ,SM13
SM14:
            DEC     DE
            LD      A,D
            OR      E
            JR      NZ,SM14
            LD      A,04H
            OUT     (02),A
            RET
SM15:
            PUSH    HL
            PUSH    DE
            PUSH    BC
            LD      C,A
            RLCA
            ADD     A,18H
            LD      HL,06E0H
            LD      B,A
            LD      A,C
            LD      DE,0001H
            LD      C,B
            AND     0FH
SM16:
            OUT     (01),A     ;Display value
            LD      B,C
SM17:       DJNZ    SM17
            XOR     80H        ;Toggle speaker bit
            SBC     HL,DE
            JR      NZ,SM16
            POP     BC
            POP     DE
            POP     HL
            LD      A,04H      ;G segment
            OUT     (02),A
            XOR     A
            OUT     (01),A
            RET
SM18:
            RST     20H
            RET     NZ         ;No key pressed
            LD      E,A
            XOR     A          ;Clear flags
            LD      A,E
            RET

SMTBL:      DB      08H,04H,02H,01H

;Here is the random number generator that puts 1,2,4 and 8 in memory
;between 0B00 and 0BFF.  Call this routine first
SMRAND:
            LD      B,00H
            LD      HL,3B00H
            LD      D,00010001B  ;(rotating 1 bits)
RG1:
            LD      A,R
RG2:
            RLC     D
            DEC     A
            JR      NZ,RG2
            LD      A,D
            AND     0FH
            LD      (HL),A      ;Store randome number
            INC     HL
            PUSH    AF          ;Waste time to move R on a bit
            POP     AF
            DJNZ    RG1
            RET

DODGY:
;Memory Locations
DOSCREEN:   EQU     2D00H 	        ;Game Screen Data 6 Bytes
DOSCREND:   EQU     DOSCREEN+5         ;End of Screen
DODISTVL:   EQU     2D06H            ;Distance Travelled 2 Bytes
DOPLAYPOS:  EQU     2D08H            ;Player Position 1 Byte
DOKEYPRE:   EQU     2D09H            ;Key press flag 1 Byte
DOSPEED:    EQU     2D0AH            ;Speed of update
;Constants
KEY_UP:     EQU     07H              ;Up Key Constant
KEY_DN:     EQU     04H              ;Down Key Constant

            LD      BC,0AH          ;Do 10 times
            LD      HL,DOSCREEN       ;Set HL to First RAM location
            XOR     A               ;Zero A
DO1:
            LD      (HL),A          ;Clear  Data
            INC     HL
            DJNZ    DO1             ;Repeat
DOGAME:
;SHIFT TERRAIN
            DEC     C               ;Decrease Delay and if
            JR      NZ, DO6         ;Zero shift terrain else just scan displays
            LD      B, 05H          ;Shift down 5 times
            LD      IX, DOSCREEN      ;Point IX to Screen
DO2:
            LD      A,(IX+1)        ;Get value to the right
            LD      (IX+0), A       ;Place to the left
            INC     IX              ;Move to next Segment
            DJNZ    DO2             ;Repeat all five
            LD      D, (IX-5)       ;Save first position for later
;ADD OBSTICLE ON SECOND SHIFT
            LD      A, (DOSCREND)     ;Get previous segment
            OR      A               ;Is it Blank?
            JR      Z, DO3          ;Yes, Add Obsticle
            XOR     A               ;Make it Blank
            JR      DO5
DO3:
            CALL    RANDOM          ;Get Random Value
            CPL                     ;Mix to make more random
            AND     03H             ;Get the last two bits
            CP      03H             ;Is it Three?
            JR      Z, DO3          ;No, index is okay
DO4:
            LD      HL, OBSTICLES   ;Link HL to obsticle table
            ADD     A, L            ;Get the index
            LD      L, A            ;Save the index
            LD      A, (HL)         ;Get Obsticle 
DO5:
            LD      (DOSCREND), A     ;Add Obsticle/Blank
;ADD PLAYER
            LD      A, (DOPLAYPOS)    ;Get the player position
            LD      HL, DOPLAYER      ;Link HL to player table
            ADD     A, L            ;Get the index
            LD      L, A            ;Save the index
            LD      A, (HL)         ;Get Player Segment
;CHECK FOR COLLISION
            OR      D               ;Compare player verses obsticle
            CP      D               ;Is it the same as obsticle,
            JR      Z, DO13         ;Yes, Its a Hit, Game Over
            LD      (DOSCREEN), A     ;Add Player to Screen.
;UPDATE DISTANCE TRAVELLED
            LD      HL, DODISTVL      ;Load HL with the TEN's of distance
            LD      A, (HL)         ;Get its value
            INC     A               ;Increase it by one
            DAA                     ;Convert to BCD
            LD      (HL),A          ;Save it back
            INC     HL              ;Load HL with the Hundreds's of dist
            LD      A,00H           ;Set A to zero (maintain carry)
            ADC     A,(HL)          ;Add Hundreds with Carry
            DAA                     ;Convert to BCD
            LD      (HL),A          ;Save it back

            LD      A, (DOSPEED)
            DEC     A
            LD      C, A
            LD      (DOSPEED), A

;MULTIPLEX THE DISPLAY
DO6:
            CALL    DOSCAN          ;Display the screen
;MOVE PLAYER
                                    ;Replace RST 20/NOP to LD A,I if JMON isn't used
            RST     20H             ;JMON No Wait Key handler 
            LD      B, A
            CP      0FFH            ;If FF then no key hit, so Return
            JR      NZ, DO10        ;Continue with game
            XOR     A               ;Zero A
            LD      (DOKEYPRE), A     ;Save in keypress as a no hit
DO9:
            JR      DOGAME            ;Start Game loop
DO10:
            LD      A,(DOKEYPRE)      ;Get keypress flag
            OR      A               ;Is it zero
            JR      NZ, DO9         ;No, key needs to be released
            DEC     A               ;Set A to FF
            LD      (DOKEYPRE), A     ;Store in keypress flag
            LD      A, B            ;Restore Key Pressed
            CP      KEY_UP          ;Is key 'UP'
            JR      NZ, DO11        ;No, Check Down Key
            LD      A, (DOPLAYPOS)    ;Get Player Position
            OR      A               ;Is it at the top already?
            JR      Z, DO9          ;Ignore Key hit
            DEC     A               ;Move down one
            JR      DO12            ;Save Move and continue with game
DO11:
            CP      KEY_DN          ;Is key 'DN'
            JR      NZ, DO9         ;No, Continue with game
            LD      A, (DOPLAYPOS)    ;Get Player Position
            CP      02H             ;Is it at the bottom already?
            JR      Z, DO9          ;Ignore Key hit
            INC     A               ;Move down one
DO12:
            LD      (DOPLAYPOS), A    ;Save new position
            JR      DO9             ;Continue with game

;GAME OVER
DO13:
            LD      HL, (DODISTVL)   ;Get Distanced Travelled
            CALL    DOCON_HL        ;Convert to BCD and Display
DO14:
            LD      C,20H           ;Sound Routine
            LD      L, C
            XOR     A
FS3:
            OUT     (01) ,A
            LD      B,C
FS4:        DJNZ    FS4
            XOR     80H
            DEC     L
            JR      NZ, FS3

            CALL    DOSCAN          ;Display the screen
                                    ;Replace RST 20/NOP to LD A,I if JMON isn't used
            RST     20H             ;JMON No Wait Key handler 
            CP      12H             ;GO Key
            JR      NZ, DO14        ;Not GO, repeat Scan
            JP      0041H           ;Quit back to menu

OBSTICLES:
            DB      0E4H, 0FH, 81H   ;Rock Low, Rock High and Gap
DOPLAYER:
            DB      01H, 04H, 80H    ;Dash High, Medium and Low
            
DOSCAN:
            LD      B, 20H          ;Segment Reference
            LD      HL, DOSCREEN      ;Set HL to Display Buffer
DO7:
            LD      A, (HL)         ;Get Segment Value at HL
            OUT     (02), A         ;Set on Segment
            LD      A, B            ;Get Segment reference
            OUT     (01), A         ;Activate segment
            LD      B, 80H          ;Segment delay
DO8:        DJNZ    DO8
            INC     HL              ;Move to next location
            LD      B, A            ;Save Segment reference
            XOR     A               ;Clear A
            OUT     (01), A         ;Deactivate Segment
            RRC     B               ;Move Segment Reference on to the Right
            JR      NC, DO7         ;Scan next segment if more to do
            OUT     (02), A         ;Clear port 2
            RET

;Convert HL and A to Seven Segment Display
DOCON_HL:
            LD      BC,DOSCREEN           ;Location of display buffer
            LD      A,H                 ;Get high byte of Address
            CALL    DOCON_A               ;Convert A to Segment Hex
            LD      A,L                 ;Get low byte of Address
DOCON_A:
            PUSH    AF                  ;Save A to keep original value
            RLCA                        ;Shift upper nibble to lower for masking
            RLCA
            RLCA
            RLCA
            CALL    DOCON_NIBBLE          ;Convert Lower nibble to segment hex
            POP     AF                  ;Restore A

DOCON_NIBBLE:
            AND     0FH                 ;Only look at lower nibble for indexing
            LD      DE,SEGTBL           ;Reference Segment convert table
            ADD     A,E                 ;Index table with A
            LD      E,A                 ;Update DE with index
            LD      A,(DE)              ;Look up table
            LD      (BC),A              ;Save it to display buffer
            INC     BC                  ;Increment buffer location
            RET

;SPIROID ALIEN REMAKE.

SPIALIEN:

DELAYSP:    EQU     3D00H 	    ;Game Delay Speed
RANDNO:     EQU     3D01H           ;Random number
DISP_BUFF:  EQU     3F00H           ;Display buffer for message
MESGADR:    EQU     3F98H           ;Message address
ASCII_SCRL: EQU     0056H           ;Ascii scroll routine
TUNE:       EQU     0059H           ;Tune routine

            LD      BC,1000H        ;Sixteen rounds / Zero hit
SPSTART:
            PUSH    BC              
            LD      A,0F0H
            LD      (DELAYSP),A     ;Initial Delay speed
;Get Random Alien
            CALL    RANDOM          ;RNG
            CPL 
            AND     03H             ;Mask out last three bits
;Get Alien
            LD      D,A             ;Save Alien Key match
            LD      E,01H           ;Scan Port
            LD      HL,ALIENS       ;Load HL with Alien Table
            ADD     A,L             ;Index HL with A
            LD      L,A
            LD      A,(HL)          ;Get Alian Glyph
;Game Loop
            OUT     (02),A          ;Send Glyph to Segments
SP2:
            LD      A,E             ;Get Scan Port
            OUT     (01),A          ;Turn on Segment
            CALL    DELAY           ;Pause for a bit
            LD      HL,0020H        ;get delay
            LD      C,40H           ;wavylength
            CALL    PLAYTONE        ;Play a sound
;Check Key Hit
            RST     20H             ;JMON No Wait Key handler
            CP      0FFH            ;If FF then no key hit
            JR      Z, SP3          ;Continue with game
            CP      D               ;Compare key with alien key
            JR      Z, SP4          ;Its a Hit,
SP3:
;Move Segment
            RLC     E               ;Move Segment left one
            BIT     6,E 
            JR      Z,SP2           ;No, display again
;Miss/Hit Setup
            LD      HL,AMTABLE+6    ;Set to Miss Graphic
            JR      SP5             ;Animate
SP4:
            LD      HL,AHTABLE+6    ;Set To Hit Graphic
SP5:                                ;Animate Hit/Miss
            LD      C,01H           ;First Segment
SP6:
            LD      A,0FAH          ;Minus 6
            ADD     A,L             ;Fix HL to point
            LD      L,A             ;To start of table
            LD      B,06H           ;Six Segments
SP7:
            LD      A,(HL)          ;Get Segment
            OUT     (02),A          ;Light Segment
            LD      A,C             ;Get Scan Bit
            OUT     (01),A          ;Turn on Segment
            PUSH    HL              ;Save HL
            PUSH    BC              ;Save BC
            CALL    DELAY           ;Wait
            LD      HL,DELAYSP      ;Get Delay Speed
            LD      B,0EH           ;Get Subtraction
SP8:        DEC     (HL)            ;Take 14 off
            DJNZ    SP8    
            LD      A,(DELAYSP)
            LD      L,A
            LD      H,00H           ;Clear H
            CALL    PLAYTONE        ;
            POP     BC              ;Restore
            POP     HL              ;Restore
            INC     HL              ;Get next Segment
            DJNZ    SP7             ;Repeat until all segments printed
            RLC     C               ;Move to next segment
            INC     C               ;Increase C
            BIT     3,C             ;It it passed all segments
            JR      Z,SP6           ;Do next segment
            POP     BC              ;Restore Score/Rounds
            LD      A,80H           ;Check for hit/miss
            CP      (HL)            ;If 01H, then must be a hit
            JR      NZ,SP9          ;Skip score update
            INC     C               ;Add to score
SP9:
            DJNZ    SPSTART           ;Do next Round with new Alien
GAMEOVER:   
            LD      HL,WINTUNE
            LD      DE,WINMESG
            LD      A,C             ;Load # hits in A
            CP      0BH             ;Has atleast 11 been hit?
            JR      NC,SP11
            LD      HL,LOSTUNE
            LD      DE,LOSMESG
SP11:
            LD      (TUNEADR),HL
            LD      (MESGADR),DE
            CALL    TUNE
            CALL    ASCII_SCRL
            JP      SPIALIEN    
DELAY:
            LD      A,(DELAYSP)
            LD      H,A
            LD      L,00H
SP10:
	    DEC     HL
	    LD      A,H
	    OR      L
	    JR      NZ,SP10
	    RET

RANDOM:
            LD      A,R
            LD      B,A
            LD      A,(RANDNO)
            XOR     B
            ADD     A,A
            XOR     B
            LD      (RANDNO),A
            RET

ALIENS:     DB      0FH,26H,61H,0C9H
AHTABLE:    DB      01H,09H,29H,0A9H,0E9H,0EBH    ;Hit Animation
AMTABLE:    DB      80H,64H,6BH,64H,80H,00H      ;Miss Animation
WINTUNE:    DB      04H,00H,04H,00H,04H,00H,01H,01H,01H,1FH
LOSTUNE:    DB      01H,18H,01H,18H,01H,18H,01H,18H,01H,1FH
WINMESG:    DB      "ALIENS DESTROYED!      ",0DH
LOSMESG:    DB      "END OF EARTH!      ",0DH

            DB      0FFH,0FFH

;NIM Game -- John Hardie's Favourite Game!!
;Remove a match 1,2,3 and don’t be the last.  This is a re-write, nothing wrong with the
;original, just wanted it to fit in to BMON.  Re-write by Brian Chiha

V_DISPLAY:  EQU     3F2CH           ;DISPLAY BUFFER ADDRESS (using 7seg Display codes)
A2CODE:     EQU     3F33H           ;Convert A to Segment Code
NIMMATCH:   EQU     2D02H           ;Matches left
NIMPLAYER:  EQU     2D01H           ;Current Player

NIM:
            LD      A,23H           ;Start with 23 Matches (BCD)
            LD      (NIMMATCH),A    ;Save matches
            LD      A,01010101B     ;Player 1 starts, alternate 1/0 with rotate right
            LD      (NIMPLAYER),A   ;Save current player
            LD      B,06H           ;Six Segments
            LD      HL,DISP_BUFF    ;Clear Screen
            LD      (V_DISPLAY), HL
            XOR     A               ;Blank A
NM1:            
            LD      (HL),A          ;Blank Segment
            INC     HL
            DJNZ    NM1             ;Repeat for all six segments
NM2:
            LD      HL,NIMPLAYER    ;Get next player
            RRC     (HL)            ;Rotate a check carry
            PUSH    AF              ;Save Flags
            CALL    NIMSCREEN       ;Fill Screen
            POP     AF              ;Restore Flags
            JR      C,NM5           ;Jump to player
            LD      B,00H           ;Loop Screen
NM3:
            PUSH    BC
            RST     18H             ;Do Scan/Key Loop
            POP     BC
            DJNZ    NM3             ;Loop screen
            LD      A,(NIMMATCH)    ;Get Remaing matches
            CP      20H             ;Is it computers frist go?
            JR      NC,NM4          ;Yes, get random pick
            LD      A,04H           ;4 - Players Pick always wins
            SUB     C               ;Minus Players pick
            JR      NM6             ;Update match and check win
NM4: 
            CALL    RANDOM          ;Simple Randomness
            SET     0,A             ;Ensure non zero
            AND     03H             ;Mask out high bits
            JR      NM6             ;Update match and check win
NM5:
            RST     18H             ;Do Scan/Key Loop
            CP      04H             ;Is key greater than 3?
            JR      NC,NM5          ;Just loop scan
            OR      A               ;Is key 0?
            JR      Z,NM5           ;Just loop
NM6:                            
            LD      C,A             ;Save Match selection
            LD      A,(NIMMATCH)    ;Get remaining matches
            DEC     A               ;Check for parity
            CP      C               ;Are there enough matches?
            JP      M,NIMGAMEOVR    ;No, Game over
            INC     A               ;Adjust matches
            SUB     C               ;Subtract matches
            DAA                     ;Adjust for decimal
            LD      (NIMMATCH),A    ;Store it
            JR      NM2             ;Next Round
NIMGAMEOVR:
            LD      A,(NIMPLAYER)   ;Get current Player
            RRCA                    ;See who the current player is
            LD      HL,NIMWINNER    ;Load HL with Win Message
            JR      C,NM7           ;Player wins
            LD      HL,NIMLOSER     ;Load HL with Lose Message
NM7:
            LD      (MESGADR),HL    ;Set up message
            CALL    ASCII_SCRL      ;Scroll message until key pressed
            JP      NIM             ;Go back to start
NIMSCREEN:
            LD      HL,DISP_BUFF    ;Get Display buffer
            LD      A,4FH           ;'P'
            JR      C,NM8           ;Is player?
            LD      A,0C3H          ;'C'
NM8:
            LD      (HL),A          ;Save C or P
            PUSH    BC              ;Save BC
            LD      BC,DISP_BUFF+4  ;Load BC with right most segments
            LD      A,(NIMMATCH)    ;Load A with Matches Left
            CALL    A2CODE          ;Convert A to Segment Code, store in BC
            POP     BC              ;Restore BC
            RET

NIMWINNER:  DB      "OH NO....I LOST!!      ",0DH
NIMLOSER:   DB      "YOU LOSE STUPID!!      ",0DH
            DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
            DB      0FFH,0FFH
                 


;Sound Routine.  This routine will play a series of notes based on
;data found at the reference at 3F9AH.  There are twenty four notes
;to use.  Te play a note use a reference between 01H and 18H.  Where
;01H is the lowest and 18h is the highest.  Use 00H to make a pause
;1EH to repeat the tuen and 1FH to exit.
TUNEADR:    EQU     3F9AH           ;Common Tune address location

PLAYTUNE:       
            LD      DE,(TUNEADR)    ;de = address of tune
PTLOOP1:    LD      A,(DE)          ;a = (de); a = note
            INC     DE              ;de++
            CP      1FH             ;if (a == ENDOFTUNE)
            RET     Z               ;    return
            CP      1EH             ;if (a == REPEATTUNE)
            JR      Z,PLAYTUNE      ;  goto PLAYTUNE
            CP      19H             ;if out of range
            JR      NC,PTSILENCE    ;  goto PTSILENCE
            OR      A               ;if (a == SILENCE)
            JR      Z,PTSILENCE     ;  goto PTSILENCE
            LD      HL,FREQTBL      ;hl = frequency table
            DEC     A               ;fix for indexing
            ADD     A,A             ;double a for correct index
            ADD     A,L             ;a = offset
            LD      L,A             ;l = index
            LD      A,(HL)          ;a = table + offset
            LD      C,A             ;c = wave length
            INC     HL              ;h1 = frequency num cycles
            LD      A,(HL)          ;
            LD      L,A             ;l = num cycles
            LD      H,00H           
            CALL    PLAYTONE        ;c and hl
            JR      PTLOOP1         ;play next note
PTSILENCE:  LD      HL,2000H        ;delay count = 2000
PTLOOP2:    DEC     HL              ;hl--
            LD      A,H
            OR      L               ;if (hl != 0)
            JR      NZ,PTLOOP2      ;  goto PTLOOP2
            JR      PTLOOP1         ;play next note

;The Play tone routine can be called from anywhere.  Use HL as the 
;duration and C as the wavelength.  Duration's maximum is 7FH.
PLAYTONE:   ADD     HL,HL           ;hl = hl + h1
            ADD     HL,HL           ;double again for 4Mhz
            XOR     A               ;a = 0
            PUSH    DE
            LD      DE,0001H
MTLOOP:     OUT     (01),A          ;toggle speaker bit
            LD      B,03H           ;Lenghten wave lenght
MTDELAY2:
            PUSH    BC              ;Save B
            LD      B,C             ;b = c
MTDELAY:    DJNZ    MTDELAY         ;delay?
            POP     BC              ;Restore B
            DJNZ    MTDELAY2        ;Do for 3 cycles
            XOR     80H             ;invert bit 7 of a
            SBC     HL,DE           ;hl = hl - 1
            JR      NZ,MTLOOP       ;repeat until l = 0
            POP     DE
            RET

;frequency table, contains wavelength and frequency combined sequentially
FREQTBL:    DB      8CH,19H,83H,1AH,7CH,1CH,75H,1DH
            DB      70H,1EH,67H,20H,62H,23H,5CH,25H
            DB      57H,27H,52H,29H,4EH,2CH,48H,2EH
            DB      45H,31H,41H,33H,3CH,37H,39H,3AH
            DB      36H,3DH,32H,41H,2FH,45H,2CH,49H
            DB      2AH,4DH,27H,52H,25H,57H,23H,5CH

;LUNALANDER
;you must land your luna module on the moon as gently as possible while
;gravity is pulling you down.  You can use the + key to fire your engine
;briefly this will slow down your descent but it also uses fuel.  If you
;run out of fuel you will crash
;Based off John Hardy's game on MON1.  Rewrite by Brian Chiha
LLALT:      EQU     2D02H           ;Altitude
LLVEL:      EQU     2D01H           ;Velocity
LLFUEL:     EQU     2D00H           ;Fuel Left
PLUSKEY:    EQU     10H             ;Plus Key

LUNALANDER:
            LD      A,80H           ;Altitude at 50 meters (BCD)
            LD      (LLALT),A       ;Save Starting Altitude
            LD      A,15H           ;Starting Fuel (BCD)
            LD      (LLFUEL),A      ;Save Fuel
            XOR     A               ;Blank A
            LD      (LLVEL),A       ;Starting Velocity of 0
            LD      B,06H           ;Six Segments
            LD      HL,DISP_BUFF    ;Clear Screen
            LD      (V_DISPLAY), HL
LL1:            
            LD      (HL),A          ;Blank Segment
            INC     HL
            DJNZ    LL1             ;Repeat for all six segments

LL2:
            CALL    LLSCREEN        ;Display the current lander stats
            LD      DE,0200H        ;Drop counter
LL3:        ;Scan and Key Input
            RST     18H             ;Do Scan/Key Loop
            CP      PLUSKEY         ;Was Key Press Plus +?
            JR      Z,LL4           ;Yes Adjust Velocity
            DEC     DE               ;Decrease delay
            LD      A,D
            OR      E
            JR      NZ,LL3          ;Not Zero so do Scan/Key again
            JR      LL5             ;Move Lander
LL4:        ;Fuel Used
            LD      A,(LLFUEL)      ;Check enough fuel
            OR      A               ;Is it zero?
            JR      Z,LL5           ;Yes, Move Lander
            DEC     A               ;Reduce Fuel
            DAA                     ;Decimal Adjust
            LD      (LLFUEL),A      ;Save fuel
            LD      A,(LLVEL)       ;Load Velocity
            ADD     A,02H           ;Add 2 to Velocity
            DAA                     ;Decimal Adjust
            LD      (LLVEL),A       ;Save Velocity
LL5:        ;Move Lander downwards
            LD      A,(LLVEL)       ;Load Velocity
            SUB     01H             ;Reduce it by one
            DAA                     ;Decimal Adjust
            LD      (LLVEL),A       ;Save Veloicty
            LD      B,A             ;Save B with Velocity
            LD      A,(LLALT)       ;Get Altitude
            ADD     A,B             ;Add Veloicity to Altitude
            DAA                     ;Decimal Adjust
            LD      (LLALT),A       ;Save Altitude
            OR      A               ;Have we landed?
            JP      P,LL2           ;Not Yet, Next Round
            LD      A,B             ;Check Velocity
            ADD     A,02H           ;Add 2
            DAA                     ;Adjust for decimal
            OR      A               ;Check if 0 or over
            JP      P,LL6           ;Yes, Winner!
            LD      HL,LUNALOSER    ;Load HL with LOSE Message
            LD      DE,LUNALOSE     ;Load DE with LOSE Tune
            JR      LL7
LL6:
            LD      HL,LUNAWINNER   ;Load HL with WIN Message
            LD      DE,LUNAWIN      ;Load DE with WIN Tune
LL7:
            LD      (TUNEADR),DE
            LD      (MESGADR),HL
            CALL    TUNE
            CALL    ASCII_SCRL
            JP      LUNALANDER

LLSCREEN:
            LD      BC,DISP_BUFF    ;Get Display buffer
            LD      A,(LLFUEL)      ;Get Fuel
            CALL    A2CODE          ;Convert A to Segment Code, store in BC
            LD      A,(LLALT)       ;Get Altitude
            LD      D,A             ;Save
            LD      E,80H           ;Bottom Segment
            CP      15H             ;It is under 10
            JR      C,LLS1          ;Yes
            LD      E,04H           ;Middle Segments
            CP      40H             ;It is half way
            JR      C,LLS1          ;Yes
            LD      E,01H           ;Top Segments
LLS1:
            LD      A,E             ;Get Segments
            LD      (BC),A          ;Write it
            INC     BC              ;Move to next segment
            LD      (BC),A          ;Write it
            INC     BC              ;Move to last two segments
            LD      A,D             ;Restore Altituded
            JP      A2CODE          ;Convert A to Segment Code, store in BC

LUNAWIN:    DB      14H,12H,14H,17H,17H,12H,14H,10H,1FH
LUNALOSE:   DB      01H,11H,01H,11H,01H,11H,01H,11H,1FH
LUNAWINNER: DB      "GREAT LANDING JOHN!!      ",0DH
LUNALOSER:  DB      "AAARG!! YOU DIE!!      ",0DH

MMGUESS:    EQU     2D00H           ;Guess Made by user (4 bytes)
MMANSWER:   EQU     2D04H           ;Answer (4 bytes)
MMSCORE:    EQU     2D08H           ;Correct/Score
MASTERMIND:
            LD      HL,WINTUNE
            LD      (TUNEADR),HL
            LD      HL,DISP_BUFF    ;Load HL with Display
            XOR     A
            LD      B,04H           ;four Segments
MM00:            
            LD      (HL),A          ;Blank Segment
            INC     HL
            DJNZ    MM00             ;Repeat for all six segments
            LD      D,20H 
MM0: 
            RST     18H             ;Do Scan/Key Loop
            JR      Z,MM2           ;Key Press Exit
            DEC     D
            JR      NZ,MM0
            LD      C,02H           ;Loop for all segments
MM1:
            CALL    RANDOM          ;Get Random Number
            DAA                     ;Convert to 0-9
            LD      (HL),A          ;Fill Screen
            DEC     C               ;Reduce C
            INC     HL
            JR      NZ,MM1          ;Do for second byte
            JR      MASTERMIND      ;Keep going until key press
MM2:
            LD      DE,MMANSWER     ;Load DE with Answer Location
            LD      C,02H           ;Two Bytes
MM3:
            LD      B,02H           ;Do Twice
MM4:
            XOR     A               ;Clear A
            RLD                     ;Get High Nibble in A
            LD      (DE),A          ;Load BC with A
            INC     DE              ;Move to next location
            DJNZ    MM4             ;Do for second nibble
            DEC     C               ;Second Byte
            INC     HL      
            JR      NZ,MM3          ;Do Again
;Game Starts
MM5:
            XOR     A
            LD      (MMSCORE),A
            LD      HL,DISP_BUFF    ;Get Display buffer
            LD      B,04H           ;Clear first four segments
            XOR     A               ;Clear A
MM6:
            LD      (HL),A          ;Fill with Blank
            INC     HL              ;Move to next segment
            DJNZ    MM6             ;Again
            LD      A,04H           ;Middle Segment
            LD      (HL),A          ;Display Segment
            INC     HL              ;Move to last segment
            LD      (HL),A          ;Display Segment
            LD      DE,DISP_BUFF    ;Link BC to Display for A2CODE to work
            LD      HL,MMGUESS      ;Load Guess
;Players Move
MM7:
            RST     18H             ;Do Scan/Key Loop
            JR      NZ,MM7          ;No Key Press Exit, Keep Scaning
            CP      0AH             ;Is it greater than A?
            JR      NC,MM7          ;Invalid Key, Keep Scaning
            LD      (HL),A          ;Save player number
            LD      BC,SEGTBL       ;Load Segment Table
            ADD     A,C             ;Index Table
            LD      C,A             ;
            LD      A,(BC)          ;Get Segment
            LD      (DE),A          ;Save number to screen
            INC     HL              ;Move to next guess number
            INC     DE              
            BIT     2,L             ;Is HL 2D04?
            JR      Z,MM7           ;Get Next Key
;Compare Guess to Answer
MM8:
            CALL    THINKING        ;Display Thinking Animation
            LD      HL,MMANSWER     ;Link HL To Answer
            LD      DE,MMGUESS      ;Link DE to Guess
            LD      B,04H           ;Tries
MM9:
            LD      A,(DE)          ;Get Guess
            CP      (HL)            ;Does it Match?
            JR      NZ,MM10          ;No
            LD      A,(MMSCORE)     ;Get Score
            ADD     A,10H           ;Yes, Add one to upper nibble
            LD      (MMSCORE),A     ;Save Score
MM10:
            PUSH    BC              ;Save BC
            LD      B,03            ;Check other three guesses
MM11:
            INC     DE              ;Move to next guess
            LD      A,E             ;Mask E to for overflow
            AND     03H             ;Loop if > 3
            LD      E,A             ;Reset E
            LD      A,(DE)          ;Get Guess
            CP      (HL)            ;Does it Match?
            JR      NZ,MM12         ;No
            LD      A,(MMSCORE)     ;Get Score
            INC     A               ;Yes, Add one to upper nibble
            LD      (MMSCORE),A     ;Save Score
MM12:
            DJNZ    MM11            ;Do 3 times
            POP     BC              ;Restore BC
            INC     HL              ;Next Answer
            LD      A,L             ;Make E = L-4
            SUB     04H             ;Subtract 4
            LD      E,A             ;Reset E
            DJNZ    MM9             ;Do for all 4 numbers
;Display Score
            LD      BC,DISP_BUFF+4  ;Get Display buffer last two segments
            LD      A,(MMSCORE)     ;Get Score

            PUSH    AF              ;Save Score
            CALL    A2CODE          ;Save it to display buff
            POP     AF              ;Restore Score
            BIT     6,A             ;Winner?
            JR      Z,MM13
            CALL    TUNE
MM13:
            RST     18H             ;Do Scan/Key Loop
            JR      NZ,MM13         ;Repeat until key pressed
            LD      A,(MMSCORE)     ;Get Score
            BIT     6,A             ;Winner?
            JP      NZ,MASTERMIND   ;Start New Game
            JP      MM5             ;Start Next Round Again
;Thinking Animation
THINKING:
            LD      B,02H          ;Full loop, 4 Times
            LD      HL,DISP_BUFF+4  ;Get Display buffer last two segments
THK1:
            LD      DE,THINKTBL     ;Link to Thinking Table
            PUSH    BC              ;Save BC
            LD      B,08H           ;Eight loops
THK2:
            LD      A,(DE)          ;Get Move
            LD      (HL),A          ;Display Move
            INC     HL              ;Next Display
            INC     DE              ;Next Segment
            LD      A,(DE)          ;Get Move
            LD      (HL),A          ;Display Move
            INC     DE              ;Next Segment
            PUSH    BC              ;Save B
            LD      B,30H           ;Delay
THK3:
            PUSH    BC
            RST     18H             ;Do Scan/Key Loop
            POP     BC
            DJNZ    THK3            ;Scan Again
            DEC     HL              ;Restore HL
            POP     BC              ;Restore BC
            DJNZ    THK2            ;Do next Segment
            POP     BC              ;Get C
            DJNZ    THK1            ;Repeat Sequence
            RET

THINKTBL:   DB      04H,04H,02H,08H,01H,01H,08H,02H
            DB      04H,04H,40H,20H,80H,80H,20H,40H

;Menu Command String
M_DATA:
            DB      0xFF,0xFF ; Blank
            DB      0x00,0x06 ; First menu item and number of menu items, = 7
            DW      MENU_JP_TBL ; Jump table for menu items
            DW      MENU_AD_TBL ; Menu Address LED display table
            DW      MENU_DA_TBL ; Menu Data LED display table
            DB      0xC9 ; return (unused)

MENU_JP_TBL:        ; Menu Jump table
                    ; Seven Segment Routines 
            JP      SEGHIT  ; Segment Hit
            JP      SIMON  ; Simon Game
            JP      DODGY  ; Dodgy Game
            JP      SPIALIEN ; Spiroid Alien
            JP      NIM  ; NIM Matches Game
            JP      LUNALANDER ; Luna Lander
            JP      MASTERMIND ; Master Mind
 
MENU_AD_TBL:        ; Menu Display for ADDRESS LEDs
                    ; Seven Segment Routines 
            DB      0xA7,0xC7,0xE3,0x6E ; "SEGh"
            DB      0xA7,0x42,0x61,0xEB ; "SIMO"
            DB      0xEC,0xEB,0xEC,0xE3 ; "DODG"
            DB      0x67,0x42,0xC2,0xC2 ; "kILL"
            DB      0x6B,0x42,0x61,0x00 ; "NIM "
            DB      0xC2,0x6F,0x6B,0xEC ; "LANd"
            DB      0x61,0x6F,0xA7,0xC6 ; "MASt"
 
MENU_DA_TBL:        ; Menu Display for DATA LEDs
                    ; Seven Segment Routines 
            DB      0x42,0xC6 ; "It"
            DB      0x6B,0x00 ; "N "
            DB      0xAE,0x00 ; "Y "
            DB      0xC7,0xC6 ; "Et"
            DB      0x00,0x00 ; "  "
            DB      0xC7,0x4B ; "ER"
            DB      0xC7,0x4B ; "ER"
 
            DS      0BH,00H   ;Pad out 

