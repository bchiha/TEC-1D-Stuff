# File /Users/slarti/Documents/TEC1x/TEC-1D-Stuff/code/bmon/games.z80
0000			; TEC GAMES 
0000			; --------- 
0000			; 
0000			; These games can be used on the TEC with no add ons.  They are coded 
0000			; to be used inconjuction with BMON and running at 4MHz 
0000			; 
0000			            ORG    18E0H  
18e0			GAMES: 
18e0			            ; Copy Menu Data to JMON location 
18e0 21 a3 1f		            LD      HL,M_DATA ; Menu data 
18e3 11 8d 3f		            LD      DE,3F8DH ; Destination for menu/perimiter to use 
18e6 01 0b 00		            LD      BC,000BH ; Number of bytes to copy 
18e9 ed b0		            LDIR     ; Copy it 
18eb			MENU: 
18eb c3 41 00		            JP      0041H ; Call the menu 
18ee			 
18ee			; Segment Game by Jim Robinson 
18ee			; This game the player is to press any key when a moving target is in  
18ee			; the bottom segment on the 3rd LED segment from the right.  On each  
18ee			; hit the moving segment restarts and moves faster. 
18ee			; 
18ee			;    A D D R E S S       D A T A 
18ee			;  --   --   --   --     --   -- 
18ee			; |  | |  | |  | |  |   |  | |  | 
18ee			;  --   --   --   --     --   -- 
18ee			; |  | |  | |  | |  |   |  | |  | 
18ee			;  --   --   --   --     --   -- 
18ee			;                 ^^ 
18ee			;                 || 
18ee			;          This segment lit up 
18ee			 
18ee			SEGHIT: 
18ee			 
18ee			SEGSCORE:   EQU     3D00H ;Score in HEX              (1-byte) 
18ee			SEGSPEED:   EQU     3D01H ;Speed variable            (1-byte) 
18ee			 
18ee 11 00 a0		            LD      DE,0A000H  
18f1 ed 53 01 3d	            LD      (SEGSPEED),DE  ;Initial Speed 
18f5 af			            XOR     A  
18f6 32 00 3d		            LD      (SEGSCORE),A   ;Initial Score is 0 
18f9			SH1: 
18f9 21 91 19		            LD      HL,SEGDTBL  ;Segment table lookup 
18fc			SH2: 
18fc 7e			            LD      A,(HL)  
18fd 47			            LD      B,A         ;LED to Use 
18fe 23			            INC     HL  
18ff 7e			            LD      A,(HL)  
1900 4f			            LD      C,A         ;Segment to Use 
1901 23			            INC     HL  
1902 78			            LD      A,B         ;Check if last segment which is 0xFF 
1903 fe ff		            CP      0FFH        ;Its game over if zero 
1905 28 3e		            JR      Z,SH6  
1907 d3 01		            OUT     (01),A      ;Light up LED and Segment 
1909 79			            LD      A,C  
190a d3 02		            OUT     (02),A  
190c cd 18 19		            CALL    SH3      ;Delay the movement 
190f cd 22 19		            CALL    SH5      ;Check for key hit 
1912 fe 12		            CP      12H      ;If segment is hit, KEYCHK returns 12H in A register 
1914 28 e3		            JR      Z,SH1   ;Reset Segments and do it again 
1916 18 e4		            JR      SH2      ;Display next Segment 
1918			SH3:  
1918 ed 5b 01 3d	            LD      DE,(SEGSPEED)  
191c 1b			SH4:        DEC     DE  
191d 7a			            LD      A,D  
191e b7			            OR      A           ;Check if 0  
191f c8			            RET     Z           ;Delay is done, exit 
1920 18 fa		            JR      SH4         ;Keep decreasing to delay 
1922			SH5:  
1922 e7			            RST     20H         ;JMON No Wait Key handler that sets key if pressed 
1923 c0			            RET     NZ          ;Return if no key hit 
1924 78			            LD      A,B         ;Check if LED is on Third from RIGHT  
1925 fe 04		            CP      04H  
1927 c0			            RET     NZ          ;Exit if not 
1928 79			            LD      A,C         ;Check if Bottom Segment is LIT 
1929 fe 80		            CP      80H   
192b c0			            RET     NZ          ;Exit if not 
192c			 
192c 3a 00 3d		            LD      A,(SEGSCORE)   ;Update Score 
192f 3c			            INC     A 
1930 27			            DAA                 ;Adjust for BCD addition  
1931 32 00 3d		            LD      (SEGSCORE),A   ;Save Score 
1934			 
1934 4f			            LD      C,A         ;Save for Scan 
1935 cd 5a 19		            CALL    SH7        ;Display Score 
1938 ed 5b 01 3d	            LD      DE,(SEGSPEED)  ;Load Speed 
193c 15			            DEC     D           ;Reduce Speed by 1  
193d 15			            DEC     D           ;Reduce Speed by 1  
193e ed 53 01 3d	            LD      (SEGSPEED),DE   
1942 3e 12		            LD      A,12H       ;Tell main loop that segment was hit to reset segments  
1944 c9			            RET 
1945			SH6:       
1945 11 00 ff		            LD      DE,0FF00H    ;Some random address  
1948 ed 53 01 3d	            LD      (SEGSPEED),DE  ;Set it to Speed (assume FF) 
194c 3e bf		            LD      A,0BFH  
194e d3 01		            OUT     (01),A      ;Light up all LEDS and speaker 
1950 3e 85		            LD      A,85H  
1952 d3 02		            OUT     (02),A      ;Light up horizontal segments only  
1954 cd 18 19		            CALL    SH3  
1957 c3 41 00		            JP      0041H       ;Quit 
195a 06 80		SH7:        LD      B,80H       ;Multiplex 
195c c5			SH8:        PUSH    BC 
195d af			            XOR     A            
195e d3 02		            OUT     (02),A 
1960 3e 01		            LD      A,01H 
1962 d3 01		            OUT     (01),A 
1964 79			            LD      A,C 
1965 cd 86 19		            CALL    SH11 
1968 06 00		            LD      B,00H 
196a 10 fe		SH9:        DJNZ    SH9 
196c af			            XOR     A 
196d d3 02		            OUT     (02),A 
196f 3e 02		            LD      A,02H 
1971 d3 01		            OUT     (01),A 
1973 79			            LD      A,C 
1974 0f			            RRCA 
1975 0f			            RRCA 
1976 0f			            RRCA 
1977 0f			            RRCA 
1978 cd 86 19		            CALL    SH11 
197b 06 00		            LD      B,00H 
197d 10 fe		SH10:       DJNZ    SH10 
197f af			            XOR     A 
1980 d3 01		            OUT     (01),A 
1982 c1			            POP     BC 
1983 10 d7		            DJNZ    SH8 
1985 c9			            RET 
1986			SH11: 
1986 e6 0f		            AND     0FH        ;Mask high nibble 
1988 21 b2 19		            LD      HL,SEGTBL 
198b 85			            ADD     A,L 
198c 6f			            LD      L,A 
198d 7e			            LD      A,(HL)     ;Get Segment 
198e d3 02		            OUT     (02),A     ;Display number 
1990 c9			            RET 
1991			 
1991			            ;Data for Segments, First Byte is LED to select (Port 1), 
1991			            ;and second byte is Segment to light up (Port 2) 
1991 20 01 10 01 08 01 04 01	SEGDTBL:    DB      20H,01H,10H,01H,08H,01H,04H,01H 
1999 04 08 04 04 08 04 10 04	            DB      04H,08H,04H,04H,08H,04H,10H,04H 
19a1 20 04 20 40 20 80 10 80	            DB      20H,04H,20H,40H,20H,80H,10H,80H 
19a9 08 80 04 80 02 80 01 80 ff	            DB      08H,80H,04H,80H,02H,80H,01H,80H,0FFH 
19b2 eb 28 cd ad 2e a7 e7 29 ef 2f	SEGTBL:     DB      0EBH,28H,0CDH,0ADH,2EH,0A7H,0E7H,29H,0EFH,2FH 
19bc			 
19bc			SIMON: 
19bc			;SIMON Game written by Jim Robertson 
19bc			;----------------------------------- 
19bc			; The 4 LED Segments from the right represent keys 0,4,8,C. 
19bc			; The segments light up and the order they light up represents the 
19bc			; keys to press. 
19bc			; 
19bc			; Modified by B Chiha to auto populate random numbers at startup. 
19bc			; 
19bc cd 92 1a		            CALL    SMRAND      ;Set up random numbers from 3B00 to 3BFF 
19bf ed 5f		            LD      A,R         ;Get random number for random table lookup 
19c1 6f			            LD      L,A         ;at 3Bxx 
19c2			SM1: 
19c2 0e 01		            LD      C,01H 
19c4 cd 4c 1a		            CALL    SM12 
19c7 26 3b		            LD      H,3BH 
19c9			SM2: 
19c9 41			            LD      B,C         ;Working counter 
19ca e5			            PUSH    HL 
19cb			SM3: 
19cb 7e			            LD      A,(HL)      ;Get Random value 
19cc cd 60 1a		            CALL    SM15 
19cf 2c			            INC     L 
19d0 cd 4c 1a		            CALL    SM12       ;Call delay which shortens on each call 
19d3 10 f6		            DJNZ    SM3 
19d5 e1			            POP     HL 
19d6 41			            LD      B,C 
19d7 e5			            PUSH    HL 
19d8			SM4: 
19d8 cd 88 1a		            CALL    SM18 
19db 20 fb		            JR      NZ,SM4   ;No key pressed 
19dd 0f			            RRCA                ;Check for keys 0,4,8,C by shifting 
19de 0f			            RRCA                ;twice to the right..Clever! 
19df fe 04		            CP      04H         ;Compare with 4 to see if valid key 
19e1 30 f5		            JR      NC,SM4 
19e3 e5			            PUSH    HL 
19e4 21 8e 1a		            LD      HL,SMTBL   ;Display Table 
19e7 85			            ADD     A,L 
19e8 6f			            LD      L,A 
19e9 7e			            LD      A,(HL)      ;Get display value based on key press 
19ea e1			            POP     HL 
19eb be			            CP      (HL)        ;Complare key pressed with value in lookup 
19ec 20 12		            JR      NZ,SM6 
19ee cd 60 1a		            CALL    SM15 
19f1 2c			            INC     L 
19f2			SM5: 
19f2 cd 88 1a		            CALL    SM18    ;Get another key 
19f5 28 fb		            JR      Z,SM5   ;Loop until key released 
19f7 10 df		            DJNZ    SM4 
19f9 e1			            POP     HL 
19fa cd 4c 1a		            CALL    SM12 
19fd 0c			            INC     C 
19fe 18 c9		            JR      SM2        ;Jump back to start of game 
1a00			SM6: 
1a00 3e 30		            LD      A,30H       ;Incorrect answer 
1a02 cd 60 1a		            CALL    SM15 
1a05 41			            LD      B,C 
1a06 af			            XOR     A 
1a07			SM7: 
1a07 3c			            INC     A 
1a08 27			            DAA 
1a09 10 fc		            DJNZ    SM7 
1a0b 3d			            DEC     A 
1a0c 27			            DAA 
1a0d 4f			            LD      C,A 
1a0e af			SM8:        XOR     A           ;Multiplex 
1a0f d3 02		            OUT     (02),A 
1a11 3e 04		            LD      A,04H 
1a13 d3 01		            OUT     (01),A 
1a15 79			            LD      A,C 
1a16 cd 41 1a		            CALL    SM11 
1a19 06 00		            LD      B,00H 
1a1b 10 fe		SM9:        DJNZ    SM9 
1a1d af			            XOR     A 
1a1e d3 02		            OUT     (02),A 
1a20 3e 08		            LD      A,08H 
1a22 d3 01		            OUT     (01),A 
1a24 79			            LD      A,C 
1a25 0f			            RRCA 
1a26 0f			            RRCA 
1a27 0f			            RRCA 
1a28 0f			            RRCA 
1a29 cd 41 1a		            CALL    SM11 
1a2c 06 00		            LD      B,00H 
1a2e 10 fe		SM10:       DJNZ    SM10 
1a30 cd 88 1a		            CALL    SM18 
1a33 14			            INC     D 
1a34 fe 12		            CP      12H        ;Check if GO pressed 
1a36 20 d6		            JR      NZ,SM8    ;Keep scanning until GO pressed 
1a38 6a			            LD      L,D        ;Put random number in L 
1a39 af			            XOR     A 
1a3a d3 01		            OUT     (01),A 
1a3c cd 60 1a		            CALL    SM15 
1a3f 18 81		            JR      SM1 
1a41			SM11: 
1a41 e6 0f		            AND     0FH        ;Mask high nibble 
1a43 21 b2 19		            LD      HL,SEGTBL 
1a46 85			            ADD     A,L 
1a47 6f			            LD      L,A 
1a48 7e			            LD      A,(HL)     ;Get Segment 
1a49 d3 02		            OUT     (02),A     ;Display number 
1a4b c9			            RET 
1a4c			SM12: 
1a4c 11 00 80		            LD      DE,8000H 
1a4f 79			            LD      A,C        ;Frame count 
1a50 07			            RLCA 
1a51 07			            RLCA 
1a52			SM13: 
1a52 15			            DEC     D 
1a53 3d			            DEC     A 
1a54 20 fc		            JR      NZ,SM13 
1a56			SM14: 
1a56 1b			            DEC     DE 
1a57 7a			            LD      A,D 
1a58 b3			            OR      E 
1a59 20 fb		            JR      NZ,SM14 
1a5b 3e 04		            LD      A,04H 
1a5d d3 02		            OUT     (02),A 
1a5f c9			            RET 
1a60			SM15: 
1a60 e5			            PUSH    HL 
1a61 d5			            PUSH    DE 
1a62 c5			            PUSH    BC 
1a63 4f			            LD      C,A 
1a64 07			            RLCA 
1a65 c6 18		            ADD     A,18H 
1a67 21 e0 06		            LD      HL,06E0H 
1a6a 47			            LD      B,A 
1a6b 79			            LD      A,C 
1a6c 11 01 00		            LD      DE,0001H 
1a6f 48			            LD      C,B 
1a70 e6 0f		            AND     0FH 
1a72			SM16: 
1a72 d3 01		            OUT     (01),A     ;Display value 
1a74 41			            LD      B,C 
1a75 10 fe		SM17:       DJNZ    SM17 
1a77 ee 80		            XOR     80H        ;Toggle speaker bit 
1a79 ed 52		            SBC     HL,DE 
1a7b 20 f5		            JR      NZ,SM16 
1a7d c1			            POP     BC 
1a7e d1			            POP     DE 
1a7f e1			            POP     HL 
1a80 3e 04		            LD      A,04H      ;G segment 
1a82 d3 02		            OUT     (02),A 
1a84 af			            XOR     A 
1a85 d3 01		            OUT     (01),A 
1a87 c9			            RET 
1a88			SM18: 
1a88 e7			            RST     20H 
1a89 c0			            RET     NZ         ;No key pressed 
1a8a 5f			            LD      E,A 
1a8b af			            XOR     A          ;Clear flags 
1a8c 7b			            LD      A,E 
1a8d c9			            RET 
1a8e			 
1a8e 08 04 02 01	SMTBL:      DB      08H,04H,02H,01H 
1a92			 
1a92			;Here is the random number generator that puts 1,2,4 and 8 in memory 
1a92			;between 0B00 and 0BFF.  Call this routine first 
1a92			SMRAND: 
1a92 06 00		            LD      B,00H 
1a94 21 00 3b		            LD      HL,3B00H 
1a97 16 11		            LD      D,00010001B  ;(rotating 1 bits) 
1a99			RG1: 
1a99 ed 5f		            LD      A,R 
1a9b			RG2: 
1a9b cb 02		            RLC     D 
1a9d 3d			            DEC     A 
1a9e 20 fb		            JR      NZ,RG2 
1aa0 7a			            LD      A,D 
1aa1 e6 0f		            AND     0FH 
1aa3 77			            LD      (HL),A      ;Store randome number 
1aa4 23			            INC     HL 
1aa5 f5			            PUSH    AF          ;Waste time to move R on a bit 
1aa6 f1			            POP     AF 
1aa7 10 f0		            DJNZ    RG1 
1aa9 c9			            RET 
1aaa			 
1aaa			DODGY: 
1aaa			;Memory Locations 
1aaa			DOSCREEN:   EQU     2D00H 	        ;Game Screen Data 6 Bytes 
1aaa			DOSCREND:   EQU     DOSCREEN+5         ;End of Screen 
1aaa			DODISTVL:   EQU     2D06H            ;Distance Travelled 2 Bytes 
1aaa			DOPLAYPOS:  EQU     2D08H            ;Player Position 1 Byte 
1aaa			DOKEYPRE:   EQU     2D09H            ;Key press flag 1 Byte 
1aaa			DOSPEED:    EQU     2D0AH            ;Speed of update 
1aaa			;Constants 
1aaa			KEY_UP:     EQU     07H              ;Up Key Constant 
1aaa			KEY_DN:     EQU     04H              ;Down Key Constant 
1aaa			 
1aaa 01 0a 00		            LD      BC,0AH          ;Do 10 times 
1aad 21 00 2d		            LD      HL,DOSCREEN       ;Set HL to First RAM location 
1ab0 af			            XOR     A               ;Zero A 
1ab1			DO1: 
1ab1 77			            LD      (HL),A          ;Clear  Data 
1ab2 23			            INC     HL 
1ab3 10 fc		            DJNZ    DO1             ;Repeat 
1ab5			DOGAME: 
1ab5			;SHIFT TERRAIN 
1ab5 0d			            DEC     C               ;Decrease Delay and if 
1ab6 20 53		            JR      NZ, DO6         ;Zero shift terrain else just scan displays 
1ab8 06 05		            LD      B, 05H          ;Shift down 5 times 
1aba dd 21 00 2d	            LD      IX, DOSCREEN      ;Point IX to Screen 
1abe			DO2: 
1abe dd 7e 01		            LD      A,(IX+1)        ;Get value to the right 
1ac1 dd 77 00		            LD      (IX+0), A       ;Place to the left 
1ac4 dd 23		            INC     IX              ;Move to next Segment 
1ac6 10 f6		            DJNZ    DO2             ;Repeat all five 
1ac8 dd 56 fb		            LD      D, (IX-5)       ;Save first position for later 
1acb			;ADD OBSTICLE ON SECOND SHIFT 
1acb 3a 05 2d		            LD      A, (DOSCREND)     ;Get previous segment 
1ace b7			            OR      A               ;Is it Blank? 
1acf 28 03		            JR      Z, DO3          ;Yes, Add Obsticle 
1ad1 af			            XOR     A               ;Make it Blank 
1ad2 18 0f		            JR      DO5 
1ad4			DO3: 
1ad4 cd 42 1c		            CALL    RANDOM          ;Get Random Value 
1ad7 e6 03		            AND     03H             ;Get the last two bits 
1ad9 fe 03		            CP      03H             ;Is it Three? 
1adb 28 f7		            JR      Z, DO3          ;No, index is okay 
1add			DO4: 
1add 21 62 1b		            LD      HL, OBSTICLES   ;Link HL to obsticle table 
1ae0 85			            ADD     A, L            ;Get the index 
1ae1 6f			            LD      L, A            ;Save the index 
1ae2 7e			            LD      A, (HL)         ;Get Obsticle  
1ae3			DO5: 
1ae3 32 05 2d		            LD      (DOSCREND), A     ;Add Obsticle/Blank 
1ae6			;ADD PLAYER 
1ae6 3a 08 2d		            LD      A, (DOPLAYPOS)    ;Get the player position 
1ae9 21 65 1b		            LD      HL, DOPLAYER      ;Link HL to player table 
1aec 85			            ADD     A, L            ;Get the index 
1aed 6f			            LD      L, A            ;Save the index 
1aee 7e			            LD      A, (HL)         ;Get Player Segment 
1aef			;CHECK FOR COLLISION 
1aef b2			            OR      D               ;Compare player verses obsticle 
1af0 ba			            CP      D               ;Is it the same as obsticle, 
1af1 28 50		            JR      Z, DO13         ;Yes, Its a Hit, Game Over 
1af3 32 00 2d		            LD      (DOSCREEN), A     ;Add Player to Screen. 
1af6			;UPDATE DISTANCE TRAVELLED 
1af6 21 06 2d		            LD      HL, DODISTVL      ;Load HL with the TEN's of distance 
1af9 7e			            LD      A, (HL)         ;Get its value 
1afa 3c			            INC     A               ;Increase it by one 
1afb 27			            DAA                     ;Convert to BCD 
1afc 77			            LD      (HL),A          ;Save it back 
1afd 23			            INC     HL              ;Load HL with the Hundreds's of dist 
1afe 3e 00		            LD      A,00H           ;Set A to zero (maintain carry) 
1b00 8e			            ADC     A,(HL)          ;Add Hundreds with Carry 
1b01 27			            DAA                     ;Convert to BCD 
1b02 77			            LD      (HL),A          ;Save it back 
1b03			 
1b03 3a 0a 2d		            LD      A, (DOSPEED) 
1b06 3d			            DEC     A 
1b07 4f			            LD      C, A 
1b08 32 0a 2d		            LD      (DOSPEED), A 
1b0b			 
1b0b			;MULTIPLEX THE DISPLAY 
1b0b			DO6: 
1b0b cd 68 1b		            CALL    DOSCAN          ;Display the screen 
1b0e			;MOVE PLAYER 
1b0e			                                    ;Replace RST 20/NOP to LD A,I if JMON isn't used 
1b0e e7			            RST     20H             ;JMON No Wait Key handler  
1b0f 47			            LD      B, A 
1b10 fe ff		            CP      0FFH            ;If FF then no key hit, so Return 
1b12 20 06		            JR      NZ, DO10        ;Continue with game 
1b14 af			            XOR     A               ;Zero A 
1b15 32 09 2d		            LD      (DOKEYPRE), A     ;Save in keypress as a no hit 
1b18			DO9: 
1b18 18 9b		            JR      DOGAME            ;Start Game loop 
1b1a			DO10: 
1b1a 3a 09 2d		            LD      A,(DOKEYPRE)      ;Get keypress flag 
1b1d b7			            OR      A               ;Is it zero 
1b1e 20 f8		            JR      NZ, DO9         ;No, key needs to be released 
1b20 3d			            DEC     A               ;Set A to FF 
1b21 32 09 2d		            LD      (DOKEYPRE), A     ;Store in keypress flag 
1b24 78			            LD      A, B            ;Restore Key Pressed 
1b25 fe 07		            CP      KEY_UP          ;Is key 'UP' 
1b27 20 09		            JR      NZ, DO11        ;No, Check Down Key 
1b29 3a 08 2d		            LD      A, (DOPLAYPOS)    ;Get Player Position 
1b2c b7			            OR      A               ;Is it at the top already? 
1b2d 28 e9		            JR      Z, DO9          ;Ignore Key hit 
1b2f 3d			            DEC     A               ;Move down one 
1b30 18 0c		            JR      DO12            ;Save Move and continue with game 
1b32			DO11: 
1b32 fe 04		            CP      KEY_DN          ;Is key 'DN' 
1b34 20 e2		            JR      NZ, DO9         ;No, Continue with game 
1b36 3a 08 2d		            LD      A, (DOPLAYPOS)    ;Get Player Position 
1b39 fe 02		            CP      02H             ;Is it at the bottom already? 
1b3b 28 db		            JR      Z, DO9          ;Ignore Key hit 
1b3d 3c			            INC     A               ;Move down one 
1b3e			DO12: 
1b3e 32 08 2d		            LD      (DOPLAYPOS), A    ;Save new position 
1b41 18 d5		            JR      DO9             ;Continue with game 
1b43			 
1b43			;GAME OVER 
1b43			DO13: 
1b43 2a 06 2d		            LD      HL, (DODISTVL)   ;Get Distanced Travelled 
1b46 cd 83 1b		            CALL    DOCON_HL        ;Convert to BCD and Display 
1b49			DO14: 
1b49 0e 20		            LD      C,20H           ;Sound Routine 
1b4b 69			            LD      L, C 
1b4c af			            XOR     A 
1b4d			FS3: 
1b4d d3 01		            OUT     (01) ,A 
1b4f 41			            LD      B,C 
1b50 10 fe		FS4:        DJNZ    FS4 
1b52 ee 80		            XOR     80H 
1b54 2d			            DEC     L 
1b55 20 f6		            JR      NZ, FS3 
1b57			 
1b57 cd 68 1b		            CALL    DOSCAN          ;Display the screen 
1b5a			                                    ;Replace RST 20/NOP to LD A,I if JMON isn't used 
1b5a e7			            RST     20H             ;JMON No Wait Key handler  
1b5b fe 12		            CP      12H             ;GO Key 
1b5d 20 ea		            JR      NZ, DO14        ;Not GO, repeat Scan 
1b5f c3 41 00		            JP      0041H           ;Quit back to menu 
1b62			 
1b62			OBSTICLES: 
1b62 e4 0f 81		            DB      0E4H, 0FH, 81H   ;Rock Low, Rock High and Gap 
1b65			DOPLAYER: 
1b65 01 04 80		            DB      01H, 04H, 80H    ;Dash High, Medium and Low 
1b68			             
1b68			DOSCAN: 
1b68 06 20		            LD      B, 20H          ;Segment Reference 
1b6a 21 00 2d		            LD      HL, DOSCREEN      ;Set HL to Display Buffer 
1b6d			DO7: 
1b6d 7e			            LD      A, (HL)         ;Get Segment Value at HL 
1b6e d3 02		            OUT     (02), A         ;Set on Segment 
1b70 78			            LD      A, B            ;Get Segment reference 
1b71 d3 01		            OUT     (01), A         ;Activate segment 
1b73 06 80		            LD      B, 80H          ;Segment delay 
1b75 10 fe		DO8:        DJNZ    DO8 
1b77 23			            INC     HL              ;Move to next location 
1b78 47			            LD      B, A            ;Save Segment reference 
1b79 af			            XOR     A               ;Clear A 
1b7a d3 01		            OUT     (01), A         ;Deactivate Segment 
1b7c cb 08		            RRC     B               ;Move Segment Reference on to the Right 
1b7e 30 ed		            JR      NC, DO7         ;Scan next segment if more to do 
1b80 d3 02		            OUT     (02), A         ;Clear port 2 
1b82 c9			            RET 
1b83			 
1b83			;Convert HL and A to Seven Segment Display 
1b83			DOCON_HL: 
1b83 01 00 2d		            LD      BC,DOSCREEN           ;Location of display buffer 
1b86 7c			            LD      A,H                 ;Get high byte of Address 
1b87 cd 8b 1b		            CALL    DOCON_A               ;Convert A to Segment Hex 
1b8a 7d			            LD      A,L                 ;Get low byte of Address 
1b8b			DOCON_A: 
1b8b f5			            PUSH    AF                  ;Save A to keep original value 
1b8c 07			            RLCA                        ;Shift upper nibble to lower for masking 
1b8d 07			            RLCA 
1b8e 07			            RLCA 
1b8f 07			            RLCA 
1b90 cd 94 1b		            CALL    DOCON_NIBBLE          ;Convert Lower nibble to segment hex 
1b93 f1			            POP     AF                  ;Restore A 
1b94			 
1b94			DOCON_NIBBLE: 
1b94 e6 0f		            AND     0FH                 ;Only look at lower nibble for indexing 
1b96 11 b2 19		            LD      DE,SEGTBL           ;Reference Segment convert table 
1b99 83			            ADD     A,E                 ;Index table with A 
1b9a 5f			            LD      E,A                 ;Update DE with index 
1b9b 1a			            LD      A,(DE)              ;Look up table 
1b9c 02			            LD      (BC),A              ;Save it to display buffer 
1b9d 03			            INC     BC                  ;Increment buffer location 
1b9e c9			            RET 
1b9f			 
1b9f			;SPIROID ALIEN REMAKE. 
1b9f			 
1b9f			SPIALIEN: 
1b9f			 
1b9f			DELAYSP:    EQU     3D00H 	    ;Game Delay Speed 
1b9f			RANDNO:     EQU     3D01H           ;Random number 
1b9f			DISP_BUFF:  EQU     3F00H           ;Display buffer for message 
1b9f			MESGADR:    EQU     3F98H           ;Message address 
1b9f			ASCII_SCRL: EQU     0056H           ;Ascii scroll routine 
1b9f			TUNE:       EQU     0059H           ;Tune routine 
1b9f			 
1b9f 01 00 10		            LD      BC,1000H        ;Sixteen rounds / Zero hit 
1ba2			SPSTART: 
1ba2 c5			            PUSH    BC               
1ba3 3e f0		            LD      A,0F0H 
1ba5 32 00 3d		            LD      (DELAYSP),A     ;Initial Delay speed 
1ba8			;Get Random Alien 
1ba8 cd 42 1c		            CALL    RANDOM          ;RNG 
1bab e6 03		            AND     03H             ;Mask out last three bits 
1bad			;Get Alien 
1bad 57			            LD      D,A             ;Save Alien Key match 
1bae 1e 01		            LD      E,01H           ;Scan Port 
1bb0 21 4f 1c		            LD      HL,ALIENS       ;Load HL with Alien Table 
1bb3 85			            ADD     A,L             ;Index HL with A 
1bb4 6f			            LD      L,A 
1bb5 7e			            LD      A,(HL)          ;Get Alian Glyph 
1bb6			;Game Loop 
1bb6 d3 02		            OUT     (02),A          ;Send Glyph to Segments 
1bb8			SP2: 
1bb8 7b			            LD      A,E             ;Get Scan Port 
1bb9 d3 01		            OUT     (01),A          ;Turn on Segment 
1bbb cd 36 1c		            CALL    DELAY           ;Pause for a bit 
1bbe 21 20 00		            LD      HL,0020H        ;get delay 
1bc1 0e 40		            LD      C,40H           ;wavylength 
1bc3 cd 91 1d		            CALL    PLAYTONE        ;Play a sound 
1bc6			;Check Key Hit 
1bc6 e7			            RST     20H             ;JMON No Wait Key handler 
1bc7 fe ff		            CP      0FFH            ;If FF then no key hit 
1bc9 28 03		            JR      Z, SP3          ;Continue with game 
1bcb ba			            CP      D               ;Compare key with alien key 
1bcc 28 0b		            JR      Z, SP4          ;Its a Hit, 
1bce			SP3: 
1bce			;Move Segment 
1bce cb 03		            RLC     E               ;Move Segment left one 
1bd0 cb 73		            BIT     6,E  
1bd2 28 e4		            JR      Z,SP2           ;No, display again 
1bd4			;Miss/Hit Setup 
1bd4 21 5f 1c		            LD      HL,AMTABLE+6    ;Set to Miss Graphic 
1bd7 18 03		            JR      SP5             ;Animate 
1bd9			SP4: 
1bd9 21 59 1c		            LD      HL,AHTABLE+6    ;Set To Hit Graphic 
1bdc			SP5:                                ;Animate Hit/Miss 
1bdc 0e 01		            LD      C,01H           ;First Segment 
1bde			SP6: 
1bde 3e fa		            LD      A,0FAH          ;Minus 6 
1be0 85			            ADD     A,L             ;Fix HL to point 
1be1 6f			            LD      L,A             ;To start of table 
1be2 06 06		            LD      B,06H           ;Six Segments 
1be4			SP7: 
1be4 7e			            LD      A,(HL)          ;Get Segment 
1be5 d3 02		            OUT     (02),A          ;Light Segment 
1be7 79			            LD      A,C             ;Get Scan Bit 
1be8 d3 01		            OUT     (01),A          ;Turn on Segment 
1bea e5			            PUSH    HL              ;Save HL 
1beb c5			            PUSH    BC              ;Save BC 
1bec cd 36 1c		            CALL    DELAY           ;Wait 
1bef 21 00 3d		            LD      HL,DELAYSP      ;Get Delay Speed 
1bf2 06 07		            LD      B,07H           ;Get Subtraction 
1bf4 35			SP8:        DEC     (HL)            ;Take 7 off 
1bf5 10 fd		            DJNZ    SP8     
1bf7 3a 00 3d		            LD      A,(DELAYSP) 
1bfa 6f			            LD      L,A 
1bfb 26 00		            LD      H,00H           ;Clear H 
1bfd cd 91 1d		            CALL    PLAYTONE        ; 
1c00 c1			            POP     BC              ;Restore 
1c01 e1			            POP     HL              ;Restore 
1c02 23			            INC     HL              ;Get next Segment 
1c03 10 df		            DJNZ    SP7             ;Repeat until all segments printed 
1c05 cb 01		            RLC     C               ;Move to next segment 
1c07 0c			            INC     C               ;Increase E 
1c08 cb 71		            BIT     6,C             ;It it passed all segments 
1c0a 28 d2		            JR      Z,SP6           ;Do next segment 
1c0c c1			            POP     BC              ;Restore Score/Rounds 
1c0d 3e 80		            LD      A,80H           ;Check for hit/miss 
1c0f be			            CP      (HL)            ;If 01H, then must be a hit 
1c10 20 01		            JR      NZ,SP9          ;Skip score update 
1c12 0c			            INC     C               ;Add to score 
1c13			SP9: 
1c13 10 8d		            DJNZ    SPSTART           ;Do next Round with new Alien 
1c15			GAMEOVER:    
1c15 21 5f 1c		            LD      HL,WINTUNE 
1c18 11 73 1c		            LD      DE,WINMESG 
1c1b 79			            LD      A,C             ;Load # hits in A 
1c1c fe 0b		            CP      0BH             ;Has atleast 11 been hit? 
1c1e 30 06		            JR      NC,SP11 
1c20 21 69 1c		            LD      HL,LOSTUNE 
1c23 11 8b 1c		            LD      DE,LOSMESG 
1c26			SP11: 
1c26 22 9a 3f		            LD      (TUNEADR),HL 
1c29 ed 53 98 3f	            LD      (MESGADR),DE 
1c2d cd 59 00		            CALL    TUNE 
1c30 cd 56 00		            CALL    ASCII_SCRL 
1c33 c3 9f 1b		            JP      SPIALIEN     
1c36			DELAY: 
1c36 3a 00 3d		            LD      A,(DELAYSP) 
1c39 67			            LD      H,A 
1c3a 2e 00		            LD      L,00H 
1c3c			SP10: 
1c3c 2b				    DEC     HL 
1c3d 7c				    LD      A,H 
1c3e b5				    OR      L 
1c3f 20 fb			    JR      NZ,SP10 
1c41 c9				    RET 
1c42			 
1c42			RANDOM: 
1c42 ed 5f		            LD      A,R 
1c44 47			            LD      B,A 
1c45 3a 01 3d		            LD      A,(RANDNO) 
1c48 a8			            XOR     B 
1c49 87			            ADD     A,A 
1c4a a8			            XOR     B 
1c4b 32 01 3d		            LD      (RANDNO),A 
1c4e c9			            RET 
1c4f			 
1c4f 0f 26 61 c9	ALIENS:     DB      0FH,26H,61H,0C9H 
1c53 01 09 29 a9 e9 eb	AHTABLE:    DB      01H,09H,29H,0A9H,0E9H,0EBH    ;Hit Animation 
1c59 80 64 6b 64 80 00	AMTABLE:    DB      80H,64H,6BH,64H,80H,00H      ;Miss Animation 
1c5f 04 00 04 00 04 00 01 01 01 1f	WINTUNE:    DB      04H,00H,04H,00H,04H,00H,01H,01H,01H,1FH 
1c69 01 18 01 18 01 18 01 18 01 1f	LOSTUNE:    DB      01H,18H,01H,18H,01H,18H,01H,18H,01H,1FH 
1c73 .. 0d		WINMESG:    DB      "ALIENS DESTROYED!      ",0DH 
1c8b .. 0d		LOSMESG:    DB      "END OF EARTH!      ",0DH 
1c9f			 
1c9f ff ff ff ff	            DB      0FFH,0FFH,0FFH,0FFH 
1ca3			 
1ca3			;NIM Game -- John Hardie's Favourite Game!! 
1ca3			;Remove a match 1,2,3 and don’t be the last.  This is a re-write, nothing wrong with the 
1ca3			;original, just wanted it to fit in to BMON.  Re-write by Brian Chiha 
1ca3			 
1ca3			V_DISPLAY:  EQU     3F2CH           ;DISPLAY BUFFER ADDRESS (using 7seg Display codes) 
1ca3			A2CODE:     EQU     3F33H           ;Convert A to Segment Code 
1ca3			NIMMATCH:   EQU     2D02H           ;Matches left 
1ca3			NIMPLAYER:  EQU     2D01H           ;Current Player 
1ca3			 
1ca3			NIM: 
1ca3 3e 23		            LD      A,23H           ;Start with 23 Matches (BCD) 
1ca5 32 02 2d		            LD      (NIMMATCH),A    ;Save matches 
1ca8 3e 55		            LD      A,01010101B     ;Player 1 starts, alternate 1/0 with rotate right 
1caa 32 01 2d		            LD      (NIMPLAYER),A   ;Save current player 
1cad 06 06		            LD      B,06H           ;Six Segments 
1caf 21 00 3f		            LD      HL,DISP_BUFF    ;Clear Screen 
1cb2 22 2c 3f		            LD      (V_DISPLAY), HL 
1cb5 af			            XOR     A               ;Blank A 
1cb6			NM1:             
1cb6 77			            LD      (HL),A          ;Blank Segment 
1cb7 23			            INC     HL 
1cb8 10 fc		            DJNZ    NM1             ;Repeat for all six segments 
1cba			NM2: 
1cba 21 01 2d		            LD      HL,NIMPLAYER    ;Get next player 
1cbd cb 0e		            RRC     (HL)            ;Rotate a check carry 
1cbf f5			            PUSH    AF              ;Save Flags 
1cc0 cd 10 1d		            CALL    NIMSCREEN       ;Fill Screen 
1cc3 f1			            POP     AF              ;Restore Flags 
1cc4 38 1c		            JR      C,NM5           ;Jump to player 
1cc6 06 00		            LD      B,00H           ;Loop Screen 
1cc8			NM3: 
1cc8 c5			            PUSH    BC 
1cc9 df			            RST     18H             ;Do Scan/Key Loop 
1cca c1			            POP     BC 
1ccb 10 fb		            DJNZ    NM3             ;Loop screen 
1ccd 3a 02 2d		            LD      A,(NIMMATCH)    ;Get Remaing matches 
1cd0 fe 20		            CP      20H             ;Is it computers frist go? 
1cd2 30 05		            JR      NC,NM4          ;Yes, get random pick 
1cd4 3e 04		            LD      A,04H           ;4 - Players Pick always wins 
1cd6 91			            SUB     C               ;Minus Players pick 
1cd7 18 11		            JR      NM6             ;Update match and check win 
1cd9			NM4:  
1cd9 cd 42 1c		            CALL    RANDOM          ;Simple Randomness 
1cdc cb c7		            SET     0,A             ;Ensure non zero 
1cde e6 03		            AND     03H             ;Mask out high bits 
1ce0 18 08		            JR      NM6             ;Update match and check win 
1ce2			NM5: 
1ce2 df			            RST     18H             ;Do Scan/Key Loop 
1ce3 fe 04		            CP      04H             ;Is key greater than 3? 
1ce5 30 fb		            JR      NC,NM5          ;Just loop scan 
1ce7 b7			            OR      A               ;Is key 0? 
1ce8 28 f8		            JR      Z,NM5           ;Just loop 
1cea			NM6:                             
1cea 4f			            LD      C,A             ;Save Match selection 
1ceb 3a 02 2d		            LD      A,(NIMMATCH)    ;Get remaining matches 
1cee 3d			            DEC     A               ;Check for parity 
1cef b9			            CP      C               ;Are there enough matches? 
1cf0 fa fb 1c		            JP      M,NIMGAMEOVR    ;No, Game over 
1cf3 3c			            INC     A               ;Adjust matches 
1cf4 91			            SUB     C               ;Subtract matches 
1cf5 27			            DAA                     ;Adjust for decimal 
1cf6 32 02 2d		            LD      (NIMMATCH),A    ;Store it 
1cf9 18 bf		            JR      NM2             ;Next Round 
1cfb			NIMGAMEOVR: 
1cfb 3a 01 2d		            LD      A,(NIMPLAYER)   ;Get current Player 
1cfe 0f			            RRCA                    ;See who the current player is 
1cff 21 26 1d		            LD      HL,NIMWINNER    ;Load HL with Win Message 
1d02 38 03		            JR      C,NM7           ;Player wins 
1d04 21 3e 1d		            LD      HL,NIMLOSER     ;Load HL with Lose Message 
1d07			NM7: 
1d07 22 98 3f		            LD      (MESGADR),HL    ;Set up message 
1d0a cd 56 00		            CALL    ASCII_SCRL      ;Scroll message until key pressed 
1d0d c3 a3 1c		            JP      NIM             ;Go back to start 
1d10			NIMSCREEN: 
1d10 21 00 3f		            LD      HL,DISP_BUFF    ;Get Display buffer 
1d13 3e 4f		            LD      A,4FH           ;'P' 
1d15 38 02		            JR      C,NM8           ;Is player? 
1d17 3e c3		            LD      A,0C3H          ;'C' 
1d19			NM8: 
1d19 77			            LD      (HL),A          ;Save C or P 
1d1a c5			            PUSH    BC              ;Save BC 
1d1b 01 04 3f		            LD      BC,DISP_BUFF+4  ;Load BC with right most segments 
1d1e 3a 02 2d		            LD      A,(NIMMATCH)    ;Load A with Matches Left 
1d21 cd 33 3f		            CALL    A2CODE          ;Convert A to Segment Code, store in BC 
1d24 c1			            POP     BC              ;Restore BC 
1d25 c9			            RET 
1d26			 
1d26 .. 0d		NIMWINNER:  DB      "OH NO....I LOST!!      ",0DH 
1d3e .. 0d		NIMLOSER:   DB      "YOU LOSE STUPID!!      ",0DH 
1d56 ff ff ff ff ff ff ff ff	            DB      0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH 
1d5e ff ff		            DB      0FFH,0FFH 
1d60			                  
1d60			 
1d60			 
1d60			;Sound Routine.  This routine will play a series of notes based on 
1d60			;data found at the reference at 3F9AH.  There are twenty four notes 
1d60			;to use.  Te play a note use a reference between 01H and 18H.  Where 
1d60			;01H is the lowest and 18h is the highest.  Use 00H to make a pause 
1d60			;1EH to repeat the tuen and 1FH to exit. 
1d60			TUNEADR:    EQU     3F9AH           ;Common Tune address location 
1d60			 
1d60			PLAYTUNE:        
1d60 ed 5b 9a 3f	            LD      DE,(TUNEADR)    ;de = address of tune 
1d64 1a			PTLOOP1:    LD      A,(DE)          ;a = (de); a = note 
1d65 13			            INC     DE              ;de++ 
1d66 fe 1f		            CP      1FH             ;if (a == ENDOFTUNE) 
1d68 c8			            RET     Z               ;    return 
1d69 fe 1e		            CP      1EH             ;if (a == REPEATTUNE) 
1d6b 28 f3		            JR      Z,PLAYTUNE      ;  goto PLAYTUNE 
1d6d fe 19		            CP      19H             ;if out of range 
1d6f 30 16		            JR      NC,PTSILENCE    ;  goto PTSILENCE 
1d71 b7			            OR      A               ;if (a == SILENCE) 
1d72 28 13		            JR      Z,PTSILENCE     ;  goto PTSILENCE 
1d74 21 a4 1d		            LD      HL,FREQTBL      ;hl = frequency table 
1d77 3d			            DEC     A               ;fix for indexing 
1d78 87			            ADD     A,A             ;double a for correct index 
1d79 85			            ADD     A,L             ;a = offset 
1d7a 6f			            LD      L,A             ;l = index 
1d7b 7e			            LD      A,(HL)          ;a = table + offset 
1d7c 4f			            LD      C,A             ;c = wave length 
1d7d 23			            INC     HL              ;h1 = frequency num cycles 
1d7e 7e			            LD      A,(HL)          ; 
1d7f 6f			            LD      L,A             ;l = num cycles 
1d80 26 00		            LD      H,00H            
1d82 cd 91 1d		            CALL    PLAYTONE        ;c and hl 
1d85 18 dd		            JR      PTLOOP1         ;play next note 
1d87 21 00 40		PTSILENCE:  LD      HL,4000H        ;delay count = 4000 
1d8a 2b			PTLOOP2:    DEC     HL              ;hl-- 
1d8b 7c			            LD      A,H 
1d8c b5			            OR      L               ;if (hl != 0) 
1d8d 20 fb		            JR      NZ,PTLOOP2      ;  goto PTLOOP2 
1d8f 18 d3		            JR      PTLOOP1         ;play next note 
1d91			 
1d91			;The Play tone routine can be called from anywhere.  Use HL as the  
1d91			;duration and C as the wavelength.  Duration's maximum is 7FH. 
1d91 29			PLAYTONE:   ADD     HL,HL           ;hl = hl + h1 
1d92 af			            XOR     A               ;a = 0 
1d93 d5			            PUSH    DE 
1d94 11 01 00		            LD      DE,0001H 
1d97 d3 01		MTLOOP:     OUT     (01),A          ;toggle speaker bit 
1d99 41			            LD      B,C             ;b = c 
1d9a 10 fe		MTDELAY:    DJNZ    MTDELAY         ;delay? 
1d9c ee 80		            XOR     80H             ;invert bit 7 of a 
1d9e ed 52		            SBC     HL,DE           ;hl = hl - 1 
1da0 20 f5		            JR      NZ,MTLOOP       ;repeat until l = 0 
1da2 d1			            POP     DE 
1da3 c9			            RET 
1da4			 
1da4			;frequency table, contains wavelength and frequency combined sequentially 
1da4 fc 59 f3 5a ec 5c e5 5d	FREQTBL:    DB      0FCH,59H,0F3H,5AH,0ECH,5CH,0E5H,5DH 
1dac e0 5e d7 60 d2 63 cc 65	            DB      0E0H,5EH,0D7H,60H,0D2H,63H,0CCH,65H 
1db4 c7 67 c2 69 be 6c b8 6e	            DB      0C7H,67H,0C2H,69H,0BEH,6CH,0B8H,6EH 
1dbc b5 71 b1 73 ac 77 a9 7a	            DB      0B5H,71H,0B1H,73H,0ACH,77H,0A9H,7AH 
1dc4 a6 7d a2 81 9f 85 9c 89	            DB      0A6H,7DH,0A2H,81H,09FH,85H,09CH,89H 
1dcc 9a 8d 97 92 95 97 93 9c	            DB      09AH,8DH,097H,92H,095H,97H,093H,9CH 
1dd4			 
1dd4			;LUNALANDER 
1dd4			;you must land your luna module on the moon as gently as possible while 
1dd4			;gravity is pulling you down.  You can use the + key to fire your engine 
1dd4			;briefly this will slow down your descent but it also uses fuel.  If you 
1dd4			;run out of fuel you will crash 
1dd4			;Based off John Hardy's game on MON1.  Rewrite by Brian Chiha 
1dd4			LLALT:      EQU     2D02H           ;Altitude 
1dd4			LLVEL:      EQU     2D01H           ;Velocity 
1dd4			LLFUEL:     EQU     2D00H           ;Fuel Left 
1dd4			PLUSKEY:    EQU     10H             ;Plus Key 
1dd4			 
1dd4			LUNALANDER: 
1dd4 3e 80		            LD      A,80H           ;Altitude at 50 meters (BCD) 
1dd6 32 02 2d		            LD      (LLALT),A       ;Save Starting Altitude 
1dd9 3e 15		            LD      A,15H           ;Starting Fuel (BCD) 
1ddb 32 00 2d		            LD      (LLFUEL),A      ;Save Fuel 
1dde af			            XOR     A               ;Blank A 
1ddf 32 01 2d		            LD      (LLVEL),A       ;Starting Velocity of 0 
1de2 06 06		            LD      B,06H           ;Six Segments 
1de4 21 00 3f		            LD      HL,DISP_BUFF    ;Clear Screen 
1de7 22 2c 3f		            LD      (V_DISPLAY), HL 
1dea			LL1:             
1dea 77			            LD      (HL),A          ;Blank Segment 
1deb 23			            INC     HL 
1dec 10 fc		            DJNZ    LL1             ;Repeat for all six segments 
1dee			 
1dee			LL2: 
1dee cd 50 1e		            CALL    LLSCREEN        ;Display the current lander stats 
1df1 11 00 02		            LD      DE,0200H        ;Drop counter 
1df4			LL3:        ;Scan and Key Input 
1df4 df			            RST     18H             ;Do Scan/Key Loop 
1df5 fe 10		            CP      PLUSKEY         ;Was Key Press Plus +? 
1df7 28 07		            JR      Z,LL4           ;Yes Adjust Velocity 
1df9 1b			            DEC     DE               ;Decrease delay 
1dfa 7a			            LD      A,D 
1dfb b3			            OR      E 
1dfc 20 f6		            JR      NZ,LL3          ;Not Zero so do Scan/Key again 
1dfe 18 14		            JR      LL5             ;Move Lander 
1e00			LL4:        ;Fuel Used 
1e00 3a 00 2d		            LD      A,(LLFUEL)      ;Check enough fuel 
1e03 b7			            OR      A               ;Is it zero? 
1e04 28 0e		            JR      Z,LL5           ;Yes, Move Lander 
1e06 3d			            DEC     A               ;Reduce Fuel 
1e07 27			            DAA                     ;Decimal Adjust 
1e08 32 00 2d		            LD      (LLFUEL),A      ;Save fuel 
1e0b 3a 01 2d		            LD      A,(LLVEL)       ;Load Velocity 
1e0e c6 02		            ADD     A,02H           ;Add 2 to Velocity 
1e10 27			            DAA                     ;Decimal Adjust 
1e11 32 01 2d		            LD      (LLVEL),A       ;Save Velocity 
1e14			LL5:        ;Move Lander downwards 
1e14 3a 01 2d		            LD      A,(LLVEL)       ;Load Velocity 
1e17 d6 01		            SUB     01H             ;Reduce it by one 
1e19 27			            DAA                     ;Decimal Adjust 
1e1a 32 01 2d		            LD      (LLVEL),A       ;Save Veloicty 
1e1d 47			            LD      B,A             ;Save B with Velocity 
1e1e 3a 02 2d		            LD      A,(LLALT)       ;Get Altitude 
1e21 80			            ADD     A,B             ;Add Veloicity to Altitude 
1e22 27			            DAA                     ;Decimal Adjust 
1e23 32 02 2d		            LD      (LLALT),A       ;Save Altitude 
1e26 b7			            OR      A               ;Have we landed? 
1e27 f2 ee 1d		            JP      P,LL2           ;Not Yet, Next Round 
1e2a 78			            LD      A,B             ;Check Velocity 
1e2b c6 02		            ADD     A,02H           ;Add 2 
1e2d 27			            DAA                     ;Adjust for decimal 
1e2e b7			            OR      A               ;Check if 0 or over 
1e2f f2 3a 1e		            JP      P,LL6           ;Yes, Winner! 
1e32 21 a1 1e		            LD      HL,LUNALOSER    ;Load HL with LOSE Message 
1e35 11 7d 1e		            LD      DE,LUNALOSE     ;Load DE with LOSE Tune 
1e38 18 06		            JR      LL7 
1e3a			LL6: 
1e3a 21 86 1e		            LD      HL,LUNAWINNER   ;Load HL with WIN Message 
1e3d 11 74 1e		            LD      DE,LUNAWIN      ;Load DE with WIN Tune 
1e40			LL7: 
1e40 ed 53 9a 3f	            LD      (TUNEADR),DE 
1e44 22 98 3f		            LD      (MESGADR),HL 
1e47 cd 59 00		            CALL    TUNE 
1e4a cd 56 00		            CALL    ASCII_SCRL 
1e4d c3 d4 1d		            JP      LUNALANDER 
1e50			 
1e50			LLSCREEN: 
1e50 01 00 3f		            LD      BC,DISP_BUFF    ;Get Display buffer 
1e53 3a 00 2d		            LD      A,(LLFUEL)      ;Get Fuel 
1e56 cd 33 3f		            CALL    A2CODE          ;Convert A to Segment Code, store in BC 
1e59 3a 02 2d		            LD      A,(LLALT)       ;Get Altitude 
1e5c 57			            LD      D,A             ;Save 
1e5d 1e 80		            LD      E,80H           ;Bottom Segment 
1e5f fe 15		            CP      15H             ;It is under 10 
1e61 38 08		            JR      C,LLS1          ;Yes 
1e63 1e 04		            LD      E,04H           ;Middle Segments 
1e65 fe 40		            CP      40H             ;It is half way 
1e67 38 02		            JR      C,LLS1          ;Yes 
1e69 1e 01		            LD      E,01H           ;Top Segments 
1e6b			LLS1: 
1e6b 7b			            LD      A,E             ;Get Segments 
1e6c 02			            LD      (BC),A          ;Write it 
1e6d 03			            INC     BC              ;Move to next segment 
1e6e 02			            LD      (BC),A          ;Write it 
1e6f 03			            INC     BC              ;Move to last two segments 
1e70 7a			            LD      A,D             ;Restore Altituded 
1e71 c3 33 3f		            JP      A2CODE          ;Convert A to Segment Code, store in BC 
1e74			 
1e74 14 12 14 17 17 12 14 10 1f	LUNAWIN:    DB      14H,12H,14H,17H,17H,12H,14H,10H,1FH 
1e7d 01 11 01 11 01 11 01 11 1f	LUNALOSE:   DB      01H,11H,01H,11H,01H,11H,01H,11H,1FH 
1e86 .. 0d		LUNAWINNER: DB      "GREAT LANDING JOHN!!      ",0DH 
1ea1 .. 0d		LUNALOSER:  DB      "AAARG!! YOU DIE!!      ",0DH 
1eb9			 
1eb9			MMGUESS:    EQU     2D00H           ;Guess Made by user (4 bytes) 
1eb9			MMANSWER:   EQU     2D04H           ;Answer (4 bytes) 
1eb9			MMSCORE:    EQU     2D08H           ;Correct/Score 
1eb9			MASTERMIND: 
1eb9 21 5f 1c		            LD      HL,WINTUNE 
1ebc 22 9a 3f		            LD      (TUNEADR),HL 
1ebf 21 00 3f		            LD      HL,DISP_BUFF    ;Load HL with Display 
1ec2 af			            XOR     A 
1ec3 06 05		            LD      B,05H           ;five Segments 
1ec5			MM00:             
1ec5 77			            LD      (HL),A          ;Blank Segment 
1ec6 23			            INC     HL 
1ec7 10 fc		            DJNZ    MM00             ;Repeat for all six segments 
1ec9 16 20		            LD      D,20H  
1ecb			MM0:  
1ecb df			            RST     18H             ;Do Scan/Key Loop 
1ecc 28 10		            JR      Z,MM2           ;Key Press Exit 
1ece 15			            DEC     D 
1ecf 20 fa		            JR      NZ,MM0 
1ed1 0e 06		            LD      C,06H           ;Loop for all segments 
1ed3			MM1: 
1ed3 cd 42 1c		            CALL    RANDOM          ;Get Random Number 
1ed6 27			            DAA                     ;Convert to 0-9 
1ed7 77			            LD      (HL),A          ;Fill Screen 
1ed8 0d			            DEC     C               ;Reduce C 
1ed9 20 f8		            JR      NZ,MM1          ;Do for second byte 
1edb c3 b9 1e		            JP      MASTERMIND      ;Keep going until key press 
1ede			MM2: 
1ede 11 04 2d		            LD      DE,MMANSWER     ;Load DE with Answer Location 
1ee1 0e 02		            LD      C,02H           ;Two Bytes 
1ee3			MM3: 
1ee3 06 02		            LD      B,02H           ;Do Twice 
1ee5			MM4: 
1ee5 af			            XOR     A               ;Clear A 
1ee6 ed 6f		            RLD                     ;Get High Nibble in A 
1ee8 12			            LD      (DE),A          ;Load BC with A 
1ee9 13			            INC     DE              ;Move to next location 
1eea 10 f9		            DJNZ    MM4             ;Do for second nibble 
1eec 0d			            DEC     C               ;Second Byte 
1eed 20 f4		            JR      NZ,MM3          ;Do Again 
1eef			;Game Starts 
1eef			MM5: 
1eef af			            XOR     A 
1ef0 32 08 2d		            LD      (MMSCORE),A 
1ef3 21 00 3f		            LD      HL,DISP_BUFF    ;Get Display buffer 
1ef6 06 04		            LD      B,04H           ;Clear first four segments 
1ef8 af			            XOR     A               ;Clear A 
1ef9			MM6: 
1ef9 77			            LD      (HL),A          ;Fill with Blank 
1efa 23			            INC     HL              ;Move to next segment 
1efb 10 fc		            DJNZ    MM6             ;Again 
1efd 3e 04		            LD      A,04H           ;Middle Segment 
1eff 77			            LD      (HL),A          ;Display Segment 
1f00 23			            INC     HL              ;Move to last segment 
1f01 77			            LD      (HL),A          ;Display Segment 
1f02 11 00 3f		            LD      DE,DISP_BUFF    ;Link BC to Display for A2CODE to work 
1f05 21 00 2d		            LD      HL,MMGUESS      ;Load Guess 
1f08			;Players Move 
1f08			MM7: 
1f08 df			            RST     18H             ;Do Scan/Key Loop 
1f09 20 fd		            JR      NZ,MM7          ;No Key Press Exit, Keep Scaning 
1f0b fe 0a		            CP      0AH             ;Is it greater than A? 
1f0d 30 f9		            JR      NC,MM7          ;Invalid Key, Keep Scaning 
1f0f 77			            LD      (HL),A          ;Save player number 
1f10 01 b2 19		            LD      BC,SEGTBL       ;Load Segment Table 
1f13 81			            ADD     A,C             ;Index Table 
1f14 4f			            LD      C,A             ; 
1f15 0a			            LD      A,(BC)          ;Get Segment 
1f16 12			            LD      (DE),A          ;Save number to screen 
1f17 23			            INC     HL              ;Move to next guess number 
1f18 13			            INC     DE               
1f19 cb 55		            BIT     2,L             ;Is HL 2D04? 
1f1b 28 eb		            JR      Z,MM7           ;Get Next Key 
1f1d			;Compare Guess to Answer 
1f1d			MM8: 
1f1d cd 71 1f		            CALL    THINKING        ;Display Thinking Animation 
1f20 21 04 2d		            LD      HL,MMANSWER     ;Link HL To Answer 
1f23 11 00 2d		            LD      DE,MMGUESS      ;Link DE to Guess 
1f26 06 04		            LD      B,04H           ;Tries 
1f28			MM9: 
1f28 1a			            LD      A,(DE)          ;Get Guess 
1f29 be			            CP      (HL)            ;Does it Match? 
1f2a 20 08		            JR      NZ,MM10          ;No 
1f2c 3a 08 2d		            LD      A,(MMSCORE)     ;Get Score 
1f2f c6 10		            ADD     A,10H           ;Yes, Add one to upper nibble 
1f31 32 08 2d		            LD      (MMSCORE),A     ;Save Score 
1f34			MM10: 
1f34 c5			            PUSH    BC              ;Save BC 
1f35 06 03		            LD      B,03            ;Check other three guesses 
1f37			MM11: 
1f37 13			            INC     DE              ;Move to next guess 
1f38 7b			            LD      A,E             ;Mask E to for overflow 
1f39 e6 03		            AND     03H             ;Loop if > 3 
1f3b 5f			            LD      E,A             ;Reset E 
1f3c 1a			            LD      A,(DE)          ;Get Guess 
1f3d be			            CP      (HL)            ;Does it Match? 
1f3e 20 07		            JR      NZ,MM12         ;No 
1f40 3a 08 2d		            LD      A,(MMSCORE)     ;Get Score 
1f43 3c			            INC     A               ;Yes, Add one to upper nibble 
1f44 32 08 2d		            LD      (MMSCORE),A     ;Save Score 
1f47			MM12: 
1f47 10 ee		            DJNZ    MM11            ;Do 3 times 
1f49 c1			            POP     BC              ;Restore BC 
1f4a 23			            INC     HL              ;Next Answer 
1f4b 7d			            LD      A,L             ;Make E = L-4 
1f4c d6 04		            SUB     04H             ;Subtract 4 
1f4e 5f			            LD      E,A             ;Reset E 
1f4f 10 d7		            DJNZ    MM9             ;Do for all 4 numbers 
1f51			;Display Score 
1f51 01 04 3f		            LD      BC,DISP_BUFF+4  ;Get Display buffer last two segments 
1f54 3a 08 2d		            LD      A,(MMSCORE)     ;Get Score 
1f57			 
1f57 f5			            PUSH    AF              ;Save Score 
1f58 cd 33 3f		            CALL    A2CODE          ;Save it to display buff 
1f5b f1			            POP     AF              ;Restore Score 
1f5c cb 77		            BIT     6,A             ;Winner? 
1f5e 28 03		            JR      Z,MM13 
1f60 cd 59 00		            CALL    TUNE 
1f63			MM13: 
1f63 df			            RST     18H             ;Do Scan/Key Loop 
1f64 20 fd		            JR      NZ,MM13         ;Repeat until key pressed 
1f66 3a 08 2d		            LD      A,(MMSCORE)     ;Get Score 
1f69 cb 77		            BIT     6,A             ;Winner? 
1f6b c2 b9 1e		            JP      NZ,MASTERMIND   ;Start New Game 
1f6e c3 ef 1e		            JP      MM5             ;Start Next Round Again 
1f71			;Thinking Animation 
1f71			THINKING: 
1f71 06 02		            LD      B,02H          ;Full loop, 4 Times 
1f73 21 04 3f		            LD      HL,DISP_BUFF+4  ;Get Display buffer last two segments 
1f76			THK1: 
1f76 11 93 1f		            LD      DE,THINKTBL     ;Link to Thinking Table 
1f79 c5			            PUSH    BC              ;Save BC 
1f7a 06 08		            LD      B,08H           ;Eight loops 
1f7c			THK2: 
1f7c 1a			            LD      A,(DE)          ;Get Move 
1f7d 77			            LD      (HL),A          ;Display Move 
1f7e 23			            INC     HL              ;Next Display 
1f7f 13			            INC     DE              ;Next Segment 
1f80 1a			            LD      A,(DE)          ;Get Move 
1f81 77			            LD      (HL),A          ;Display Move 
1f82 13			            INC     DE              ;Next Segment 
1f83 c5			            PUSH    BC              ;Save B 
1f84 06 30		            LD      B,30H           ;Delay 
1f86			THK3: 
1f86 c5			            PUSH    BC 
1f87 df			            RST     18H             ;Do Scan/Key Loop 
1f88 c1			            POP     BC 
1f89 10 fb		            DJNZ    THK3            ;Scan Again 
1f8b 2b			            DEC     HL              ;Restore HL 
1f8c c1			            POP     BC              ;Restore BC 
1f8d 10 ed		            DJNZ    THK2            ;Do next Segment 
1f8f c1			            POP     BC              ;Get C 
1f90 10 e4		            DJNZ    THK1            ;Repeat Sequence 
1f92 c9			            RET 
1f93			 
1f93 04 04 02 08 01 01 08 02	THINKTBL:   DB      04H,04H,02H,08H,01H,01H,08H,02H 
1f9b 04 04 40 20 80 80 20 40	            DB      04H,04H,40H,20H,80H,80H,20H,40H 
1fa3			 
1fa3			;Menu Command String 
1fa3			M_DATA: 
1fa3 ff ff		            DB      0xFF,0xFF ; Blank 
1fa5 00 06		            DB      0x00,0x06 ; First menu item and number of menu items, = 7 
1fa7 ae 1f		            DW      MENU_JP_TBL ; Jump table for menu items 
1fa9 c3 1f		            DW      MENU_AD_TBL ; Menu Address LED display table 
1fab df 1f		            DW      MENU_DA_TBL ; Menu Data LED display table 
1fad c9			            DB      0xC9 ; return (unused) 
1fae			 
1fae			MENU_JP_TBL:        ; Menu Jump table 
1fae			                    ; Seven Segment Routines  
1fae c3 ee 18		            JP      SEGHIT  ; Segment Hit 
1fb1 c3 bc 19		            JP      SIMON  ; Simon Game 
1fb4 c3 aa 1a		            JP      DODGY  ; Dodgy Game 
1fb7 c3 9f 1b		            JP      SPIALIEN ; Spiroid Alien 
1fba c3 a3 1c		            JP      NIM  ; NIM Matches Game 
1fbd c3 d4 1d		            JP      LUNALANDER ; Luna Lander 
1fc0 c3 b9 1e		            JP      MASTERMIND ; Master Mind 
1fc3			  
1fc3			MENU_AD_TBL:        ; Menu Display for ADDRESS LEDs 
1fc3			                    ; Seven Segment Routines  
1fc3 a7 c7 e3 6e	            DB      0xA7,0xC7,0xE3,0x6E ; "SEGh" 
1fc7 a7 42 61 eb	            DB      0xA7,0x42,0x61,0xEB ; "SIMO" 
1fcb ec eb ec e3	            DB      0xEC,0xEB,0xEC,0xE3 ; "DODG" 
1fcf 67 42 c2 c2	            DB      0x67,0x42,0xC2,0xC2 ; "kILL" 
1fd3 6b 42 61 00	            DB      0x6B,0x42,0x61,0x00 ; "NIM " 
1fd7 c2 6f 6b ec	            DB      0xC2,0x6F,0x6B,0xEC ; "LANd" 
1fdb 61 6f a7 c6	            DB      0x61,0x6F,0xA7,0xC6 ; "MASt" 
1fdf			  
1fdf			MENU_DA_TBL:        ; Menu Display for DATA LEDs 
1fdf			                    ; Seven Segment Routines  
1fdf 42 c6		            DB      0x42,0xC6 ; "It" 
1fe1 6b 00		            DB      0x6B,0x00 ; "N " 
1fe3 ae 00		            DB      0xAE,0x00 ; "Y " 
1fe5 c7 c6		            DB      0xC7,0xC6 ; "Et" 
1fe7 00 00		            DB      0x00,0x00 ; "  " 
1fe9 c7 4b		            DB      0xC7,0x4B ; "ER" 
1feb c7 4b		            DB      0xC7,0x4B ; "ER" 
1fed			  
1fed 0x00...		            DS      13H,00H   ;Pad out  
2000			 
# End of file /Users/slarti/Documents/TEC1x/TEC-1D-Stuff/code/bmon/games.z80
2000
