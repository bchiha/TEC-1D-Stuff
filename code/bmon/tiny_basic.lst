# File /Users/slarti/Documents/TEC1x/TEC-1D-Stuff/code/bmon/tiny_basic.z80
0000			;************************************************************* 
0000			; 
0000			;                 TINY BASIC FOR ZILOG Z80 
0000			;                       VERSION 2.0 
0000			;                     BY LI-CHEN WANG 
0000			; 
0000			;                  MODIFIED AND TRANSLATED 
0000			;                    TO INTEL MNEMONICS 
0000			;                     BY ROGER RAUSKOLB 
0000			;                      10 OCTOBER,1976 
0000			; 
0000			;                  MODIFIED AND TRANSLATED 
0000			;                    TO ZILOG MNEMONICS 
0000			;                      BY DOUG GABBARD 
0000			;            www.retrodepot.net 
0000			; 
0000			;                  MODIFIED AND FIXED TO WORK 
0000			;                  ON THE TEC-1F Z80 SBC USING 
0000			;                  ON BOARD BIT BANG SERIAL 
0000			;                  BY BRIAN CHIHA, JUNE 2022  
0000			; 
0000			;           RELEASED TO THE PUBLIC 
0000			;                      10 OCTOBER,2017 
0000			;                  YEAH, 41 YEARS LATER.... 
0000			; 
0000			;                         @COPYLEFT 
0000			;                   ALL WRONGS RESERVED 
0000			; 
0000			;************************************************************* 
0000			; This code is derived from the original 8080 Tiny Basic. 
0000			; It was first compiled in 8080 Mnemonics, then disassembled 
0000			; into Zilog Mnemonics.  And then checked against the original 
0000			; to ensure accuracy.  It was then partially enhanced with z80 
0000			; specific code. And once done, it was then modified to work 
0000			; with the G80-S Micro Computer. However, that portion of the 
0000			; code has been left out in order to make this code a little 
0000			; more portable.  There are only three routines that one needs 
0000			; to write, and specifing the serial port's I/O address, in 
0000			; order to make this version work with your own DIY computer. 
0000			; Those routines can be found at the end of the source code. 
0000			; 
0000			; I hope you find good use for this relic. However, I would 
0000			; ask that if you do find use for it, please put a reference 
0000			; to me in your work. And please, distribute freely. 
0000			;************************************************************* 
0000			 
0000			; Modified to work on the TEC-1F using Bit Bang Serial 
0000			; TEC 1F Contants 
0000			BAUD:	         EQU	 001BH           ; BAUD 4800 delay 
0000			KEYBUF:          EQU     00H             ; Keyboard Bit 7 (INPUT) 
0000			SCAN:            EQU     01H             ; Segment Scan Bit 6 (OUTPUT) 
0000			 
0000			;TINY BASIC CONSTANTS 
0000			;ASCII CONTROL CHARACTERS 
0000			SPACE:           EQU     20H             ; Space 
0000			TAB:             EQU     09H             ; HORIZONTAL TAB 
0000			CTRLC:           EQU     03H             ; Control "C" 
0000			CTRLG:           EQU     07H             ; Control "G" 
0000			BKSP:            EQU     08H             ; Back space 
0000			LF:              EQU     0AH             ; Line feed 
0000			VT:              EQU     0BH             ; Vertical tab 
0000			CS:              EQU     0CH             ; Clear screen 
0000			CR:              EQU     0DH             ; Carriage return 
0000			CTRLO:           EQU     0FH             ; Control "O" 
0000			CTRLQ:           EQU     11H             ; Control "Q" 
0000			CTRLS:           EQU     13H             ; Control "S" 
0000			CTRLU:           EQU     15H             ; Control "U" 
0000			CTRLZ:           EQU     1AH             ; Control "Z" 
0000			ESC:             EQU     1BH             ; Escape 
0000			DEL:             EQU     7FH             ; Delete 
0000			 
0000			;LOCAL VARIABLES 
0000			OCSW:            EQU     2000H           ;SWITCH FOR OUTPUT 
0000			CURRNT:          EQU     OCSW+1          ;POINTS FOR OUTPUT 
0000			STKGOS:          EQU     OCSW+3          ;SAVES SP IN 'GOSUB' 
0000			VARNXT:          EQU     OCSW+5          ;TEMP STORAGE 
0000			STKINP:          EQU     OCSW+7          ;SAVES SP IN 'INPUT' 
0000			LOPVAR:          EQU     OCSW+9          ;'FOR' LOOP SAVE AREA 
0000			LOPINC:          EQU     OCSW+11         ;INCREMENT 
0000			LOPLMT:          EQU     OCSW+13         ;LIMIT 
0000			LOPLN:           EQU     OCSW+15         ;LINE NUMBER 
0000			LOPPT:           EQU     OCSW+17         ;TEXT POINTER 
0000			RANPNT:          EQU     OCSW+19         ;RANDOM NUMBER POINTER 
0000			TXTUNF:          EQU     OCSW+21         ;->UNFILLED TEXT AREA 
0000			TXTBGN:          EQU     OCSW+23         ;TEXT SAVE AREA BEGINS 
0000			TXTEND:          EQU     3F00H           ;TEXT SAVE AREA ENDS 
0000			 
0000			;STACK, VARIABLES AND INPUT BUFFER 
0000			VARBGN:          EQU     3F00H           ;VARIABLE LOCATION (SIZE OF 55) 
0000			BUFFER:          EQU     3F37H           ;INPUT BUFFER (SIZE OF 80) 
0000			BUFEND:          EQU     3F87H           ;BUFFER END 
0000			STKLMT:          EQU     3F88H           ;TOP LIMIT FOR STACK 
0000			STACK:           EQU     3FFFH           ;STACK 
0000			 
0000			;************************************************************* 
0000			; *** ZERO PAGE SUBROUTINES *** 
0000			; 
0000			; THE Z80 INSTRUCTION SET ALLOWS FOR 8 ROUTINES IN LOW MEMORY 
0000			; THAT MAY BE CALLED BY RST 00H, 08H, 10H, 18H, 20H, 28H, 30H, 
0000			; AND 38H.  THIS IS A ONE BYTE INSTRUCTION, AND IS FUNCTIONALLY 
0000			; SIMILAR TO THE THREE BYTE INSTRUCTION 'CALL XXXX'. TINY BASIC 
0000			; WILL USE THE RST INSTRUCTION FOR THE 7 MOST FREQUENTLY USED 
0000			; SUBROUTINES. TWO OTHER SUBROUTINES (CRLF & TSTNUM) ARE ALSO 
0000			; IN THIS SECTION. THEY CAN BE REACHED WITH 'CALL'. 
0000			;************************************************************* 
0000			 
0000			DWA:    MACRO WHERE 
0000			        DB   (WHERE >> 8) + 128 
0000			        DB   WHERE & 0FFH 
0000			        ENDM 
0000			 
0000			        ORG    1000H 
1000			 
1000			START: 
1000 31 ff 3f		        LD SP,STACK                     ;*** COLD START *** 
1003 c3 df 16		        JP INIT 
1006			 
1006 e3			RST08:  EX (SP),HL                      ;*** TSTC OR RST 08H *** 
1007 cd 25 10		        CALL RST28                      ;IGNORE BLANKS AND 
100a be			        CP (HL)                         ;TEST CHARACTER 
100b c3 61 10		        JP TC1                          ;REST OF THIS IS AT TC1 
100e			 
100e			CRLF: 
100e 3e 0d		        LD A,CR                         ;*** CRLF *** 
1010			 
1010 f5			RST10:  PUSH AF                         ;*** OUTC OR RST 10H *** 
1011 3a 00 20		        LD A,(OCSW)                     ;PRINT CHARACTER ONLY 
1014 b7			        OR A                            ;IF OCSW SWITCH IS ON 
1015 c3 ff 16		        JP OUTC             ;REST OF THIS AT OUTC 
1018			 
1018 cd b3 13		RST18:  CALL EXPR2                      ;*** EXPR OR RST 18H *** 
101b e5			        PUSH HL                         ;EVALUATE AN EXPRESSION 
101c c3 6f 13		        JP EXPR1                        ;REST OF IT AT EXPR1 
101f			 
101f 7c			RST20:  LD A,H                          ;*** COMP OR RST 20H *** 
1020 ba			        CP D                            ;COMPARE HL WITH DE 
1021 c0			        RET NZ                          ;RETURN CORRECT C AND 
1022 7d			        LD A,L                          ;Z FLAGS 
1023 bb			        CP E                            ;BUT OLD A IS LOST 
1024 c9			        RET 
1025			 
1025 1a			RST28:  LD A,(DE)                       ;*** IGNBLK/RST 28H *** 
1026 fe 20		        CP SPACE                        ;IGNORE BLANKS 
1028 c0			        RET NZ                          ;IN TEXT (WHERE DE->) 
1029 13			        INC DE                          ;AND RETURN THE FIRST 
102a 18 f9		        JR RST28                        ;NON-BLANK CHAR. IN A 
102c			 
102c f1			RST30:  POP AF                          ;*** FINISH/RST 30H *** 
102d cd 10 15		        CALL FIN                        ;CHECK END OF COMMAND 
1030 c3 29 15		        JP QWHAT                        ;PRINT "WHAT?" IF WRONG 
1033			 
1033 cd 25 10		RST38:  CALL RST28                      ;*** TSTV OR RST 38H *** 
1036 d6 40		        SUB 40H                         ;TEST VARIABLES 
1038 d8			        RET C                           ;C:NOT A VARIABLE 
1039 20 1a		        JR NZ,TV1                       ;NOT "@" ARRAY 
103b 13			        INC DE                          ;IT IS THE "@" ARRAY 
103c cd 62 14		        CALL PARN                       ;@ SHOULD BE FOLLOWED 
103f 29			        ADD HL,HL                       ;BY (EXPR) AS ITS INDEX 
1040 38 56		        JR C,QHOW                       ;IS INDEX TOO BIG? 
1042 d5			        PUSH DE                         ;WILL IT OVERWRITE 
1043 eb			        EX DE,HL                        ;TEXT? 
1044 cd b0 14		        CALL SIZE                       ;FIND SIZE OF FREE 
1047 cd 1f 10		        CALL RST20                      ;AND CHECK THAT 
104a da 59 15		        JP C,ASORRY                     ;IF SO, SAY "SORRY" 
104d 21 00 3f		        LD HL,VARBGN                    ;IF NOT GET ADDRESS 
1050 cd d2 14		        CALL SUBDE                      ;OF @(EXPR) AND PUT IT 
1053 d1			        POP DE                          ;IN HL 
1054 c9			        RET                             ;C FLAG IS CLEARED 
1055			 
1055			TV1: 
1055 fe 1b		        CP 1BH                          ;NOT @, IS IT A TO Z? 
1057 3f			        CCF                             ;IF NOT RETURN C FLAG 
1058 d8			        RET C 
1059 13			        INC DE                          ;IF A THROUGH Z 
105a 21 00 3f		        LD HL,VARBGN                    ;COMPUTE ADDRESS OF 
105d 07			        RLCA                            ;THAT VARIABLE 
105e 85			        ADD A,L                         ;AND RETURN IT IN HL 
105f 6f			        LD L,A                          ;WITH C FLAG CLEARED 
1060			;        XOR A 
1060			;        ADC A,H 
1060			;        LD H,A 
1060 c9			        RET 
1061			 
1061			TC1: 
1061 23			        INC HL                          ;COMPARE THE BYTE THAT 
1062 28 07		        JR Z,TC2                        ;FOLLOWS THE RST INST. 
1064 c5			        PUSH BC                         ;WITH THE TEXT (DE->) 
1065 4e			        LD C,(HL)                       ;IF NOT =, ADD THE 2ND 
1066 06 00		        LD B,00H                        ;BYTE THAT FOLLOWS THE 
1068 09			        ADD HL,BC                       ;RST TO THE OLD PC 
1069 c1			        POP BC                          ;I.E., DO A RELATIVE 
106a 1b			        DEC DE                          ;JUMP IF NOT = 
106b			 
106b			TC2: 
106b 13			        INC DE                          ;IF =, SKIP THOSE BYTES 
106c 23			        INC HL                          ;AND CONTINUE 
106d e3			        EX (SP),HL 
106e c9			        RET 
106f			 
106f			TSTNUM: 
106f 21 00 00		        LD HL,0000H                     ;*** TSTNUM *** 
1072 44			        LD B,H                          ;TEST IF THE TEXT IS 
1073 cd 25 10		        CALL RST28                      ;A NUMBER 
1076			 
1076			TN1: 
1076 fe 30		        CP "0"                          ;IF NOT, RETURN 0 IN 
1078 d8			        RET C                           ;B AND HL 
1079 fe 3a		        CP ":"                          ;IF NUMBERS, CONVERT 
107b d0			        RET NC                          ;TO BINARY IN HL AND 
107c 3e f0		        LD A,0F0H                       ;SET B TO # OF DIGITS 
107e a4			        AND H                           ;IF H>255, THERE IS NO 
107f 20 17		        JR NZ,QHOW                      ;ROOM FOR NEXT DIGIT 
1081 04			        INC B                           ;B COUNTS # OF DIGITS 
1082 c5			        PUSH BC 
1083 44			        LD B,H                          ;HL=10*HL+(NEW DIGIT) 
1084 4d			        LD C,L 
1085 29			        ADD HL,HL                       ;WHERE 10* IS DONE BY 
1086 29			        ADD HL,HL                       ;SHIFT AND ADD 
1087 09			        ADD HL,BC 
1088 29			        ADD HL,HL 
1089 1a			        LD A,(DE)                       ;AND (DIGIT) IS FROM 
108a 13			        INC DE                          ;STRIPPING THE ASCII 
108b e6 0f		        AND 0FH                         ;CODE 
108d 85			        ADD A,L 
108e 6f			        LD L,A 
108f 3e 00		        LD A,00H                        ;DO THIS TO MAINTAIN CARRY FLAG 
1091 8c			        ADC A,H                         ;WHILE SETTING A TO ZERO 
1092 67			        LD H,A 
1093 c1			        POP BC 
1094 1a			        LD A,(DE)                       ;DO THIS DIGIT AFTER 
1095 f2 76 10		        JP P,TN1                        ;DIGIT. S SAYS OVERFLOW 
1098			 
1098			QHOW: 
1098 d5			        PUSH DE                         ;*** ERROR "HOW?" *** 
1099			AHOW: 
1099 11 9f 10		        LD DE,HOW 
109c c3 2d 15		        JP ERROR_ROUTINE 
109f			 
109f			 
109f .. 0d		HOW:    DB "HOW?",CR 
10a4 .. 0d		OK:     DB "OK",CR 
10a7 .. 0d		WHAT:   DB "WHAT?",CR 
10ad .. 0d		SORRY:  DB "SORRY",CR 
10b3			 
10b3			;************************************************************* 
10b3			; 
10b3			; *** MAIN *** 
10b3			; 
10b3			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM 
10b3			; AND STORES IT IN THE MEMORY. 
10b3			; 
10b3			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE 
10b3			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS 
10b3			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO 
10b3			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER 
10b3			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR) 
10b3			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE 
10b3			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF 
10b3			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED 
10b3			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED. 
10b3			; 
10b3			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM 
10b3			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE 
10b3			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE 
10b3			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT". 
10b3			; 
10b3			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION 
10b3			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS 
10b3			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED 
10b3			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF". 
10b3			; 
10b3			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER 
10b3			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN 
10b3			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND 
10b3			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0. 
10b3			;************************************************************* 
10b3			 
10b3			RSTART: 
10b3 31 ff 3f		        LD SP,STACK 
10b6			 
10b6			ST1: 
10b6 3e ff		        LD A,0FFH 
10b8 32 00 20		        LD (OCSW),A                     ;ENSURE OUTPUT IS ON 
10bb cd 0e 10		        CALL CRLF                       ;AND JUMP TO HERE 
10be 11 a4 10		        LD DE,OK                        ;DE->STRING 
10c1 97			        SUB A                           ;A=0 
10c2 cd c5 15		        CALL PRTSTG                     ;PRINT STRING UNTIL CR 
10c5 21 cc 10		        LD HL,ST2+1                     ;LITERAL 0 STORED AT STG+1 
10c8 22 01 20		        LD (CURRNT),HL                  ;CURRENT->LINE # = 0 
10cb			 
10cb			ST2: 
10cb 21 00 00		        LD HL,0000H 
10ce 22 09 20		        LD (LOPVAR),HL 
10d1 22 03 20		        LD (STKGOS),HL 
10d4			 
10d4			ST3: 
10d4 3e 3e		        LD A,'>'                        ;PROMPT '>' AND 
10d6 cd 5e 15		        CALL GETLN                      ;READ A LINE 
10d9 d5			        PUSH DE                         ;DE->END OF LINE 
10da 11 37 3f		        LD DE,BUFFER                    ;DE->BEGINNING OF LINE 
10dd cd 6f 10		        CALL TSTNUM                     ;TEST IF IT IS A NUMBER 
10e0 cd 25 10		        CALL RST28 
10e3 7c			        LD A,H                          ;HL=VALUE OF THE # OR 
10e4 b5			        OR L                            ;0 IF NO # WAS FOUND 
10e5 c1			        POP BC                          ;BC->END OF LINE 
10e6 ca 3f 18		        JP Z,DIRECT 
10e9 1b			        DEC DE                          ;BACKUP DE AND SAVE 
10ea 7c			        LD A,H                          ;VALUE OF LINE # THERE 
10eb 12			        LD (DE),A 
10ec 1b			        DEC DE 
10ed 7d			        LD A,L 
10ee 12			        LD (DE),A 
10ef c5			        PUSH BC                         ;BC,DE->BEGIN, END 
10f0 d5			        PUSH DE 
10f1 79			        LD A,C 
10f2 93			        SUB E 
10f3			 
10f3 f5			        PUSH AF                         ;A=# OF BYTES IN LINE 
10f4 cd 9e 15		        CALL FNDLN                      ;FIND THIS LINE IN SAVE 
10f7 d5			        PUSH DE                         ;AREA, DE->SAVE AREA 
10f8 20 10		        JR NZ,ST4                       ;NZ:NOT FOUND, INSERT 
10fa d5			        PUSH DE                         ;Z:FOUND, DELETE IT 
10fb cd bb 15		        CALL FNDNXT                     ;FIND NEXT LINE 
10fe			                                        ;DE->NEXT LINE 
10fe c1			        POP BC                          ;BC->LINE TO BE DELETED 
10ff 2a 15 20		        LD HL,(TXTUNF)                  ;HL->UNFILLED SAVE AREA 
1102 cd 84 16		        CALL MVUP                       ;MOVE UP TO DELETE 
1105 60			        LD H,B                          ;TXTUNF->UNFILLED ARA 
1106 69			        LD L,C 
1107 22 15 20		        LD (TXTUNF),HL                  ;UPDATE 
110a			 
110a			ST4: 
110a c1			        POP BC                          ;GET READY TO INSERT 
110b 2a 15 20		        LD HL,(TXTUNF)                  ;BUT FIRST CHECK IF 
110e f1			        POP AF                          ;THE LENGTH OF NEW LINE 
110f e5			        PUSH HL                         ;IS 3 (LINE # AND CR) 
1110 fe 03		        CP CTRLC                        ;THEN DO NOT INSERT 
1112 28 9f		        JR Z,RSTART                     ;MUST CLEAR THE STACK 
1114 85			        ADD A,L                         ;COMPUTE NEW TXTUNF 
1115 6f			        LD L,A 
1116 3e 00		        LD A,00H 
1118 8c			        ADC A,H 
1119 67			        LD H,A                          ;HL->NEW UNFILLED AREA 
111a 11 00 3f		        LD DE,TXTEND                    ;CHECK TO SEE IF THERE 
111d cd 1f 10		        CALL RST20                         ;IS ENOUGH SPACE 
1120 d2 58 15		        JP NC,QSORRY                    ;SORRY, NO ROOM FOR IT 
1123 22 15 20		        LD (TXTUNF),HL                  ;OK, UPDATE TXTUNF 
1126 d1			        POP DE                          ;DE->OLD UNFILLED AREA 
1127 cd 8e 16		        CALL MVDOWN 
112a d1			        POP DE                          ;DE->BEGIN, HL->END 
112b e1			        POP HL 
112c cd 84 16		        CALL MVUP                       ;MOVE NEW LINE TO SAVE 
112f 18 a3		        JR ST3                          ;AREA 
1131			 
1131			;************************************************************* 
1131			; 
1131			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT 
1131			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE 
1131			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST 
1131			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS 
1131			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS: 
1131			; 
1131			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART' 
1131			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE 
1131			; GO BACK TO 'RSTART'. 
1131			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE. 
1131			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE. 
1131			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE 
1131			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.) 
1131			;************************************************************* 
1131			; 
1131			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO *** 
1131			; 
1131			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN' 
1131			; 
1131			; 'STOP(CR)' GOES BACK TO 'RSTART' 
1131			; 
1131			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN 
1131			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE 
1131			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM. 
1131			; 
1131			; THERE ARE 3 MORE ENTRIES IN 'RUN': 
1131			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT. 
1131			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT. 
1131			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE. 
1131			; 
1131			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET 
1131			; LINE, AND JUMP TO 'RUNTSL' TO DO IT. 
1131			;************************************************************* 
1131			 
1131			NEW: 
1131 cd 23 15		        CALL ENDCHK                     ;*** NEW(CR) *** 
1134 21 17 20		        LD HL,TXTBGN 
1137 22 15 20		        LD (TXTUNF),HL 
113a			STOP: 
113a cd 23 15		        CALL ENDCHK                     ;*** STOP(CR) *** 
113d c3 b3 10		        JP RSTART 
1140			RUN: 
1140 cd 23 15		        CALL ENDCHK                     ;*** RUN(CR) *** 
1143 11 17 20		        LD DE,TXTBGN                    ;FIRST SAVED LINE 
1146			RUNNXL: 
1146 21 00 00		        LD HL,00H                       ;*** RUNNXL *** 
1149 cd a6 15		        CALL FNDLP                      ;FIND WHATEVER LINE # 
114c da b3 10		        JP C,RSTART                     ;C:PASSED TXTUNF, QUIT 
114f			RUNTSL: 
114f eb			        EX DE,HL                        ;*** RUNTSL *** 
1150 22 01 20		        LD (CURRNT),HL                  ;SET 'CURRENT'->LINE # 
1153 eb			        EX DE,HL 
1154 13			        INC DE                          ;BUMP PASS LINE # 
1155 13			        INC DE 
1156			RUNSML: 
1156 cd 3e 17		        CALL CHKIO                      ;*** RUNSML *** 
1159 21 ae 17		        LD HL,TAB2-1                    ;FIND COMMAND IN TAB2 
115c c3 42 18		        JP EXEC                         ;AND EXECUTE IT 
115f			GOTO: 
115f cd 18 10		        CALL RST18                         ;*** GOTO EXPR *** 
1162 d5			        PUSH DE                         ;SAVE FOR ERROR ROUTINE 
1163 cd 23 15		        CALL ENDCHK                     ;MUST FIND A CR 
1166 cd 9e 15		        CALL FNDLN                      ;FIND THE TARGET LINE 
1169 c2 99 10		        JP NZ,AHOW                      ;NO SUCH LINE # 
116c f1			        POP AF                          ;CLEAR THE PUSH DE 
116d 18 e0		        JR RUNTSL                       ;GO DO IT 
116f			 
116f			;************************************************************* 
116f			; 
116f			; *** LIST *** & PRINT *** 
116f			; 
116f			; LIST HAS TWO FORMS: 
116f			; 'LIST(CR)' LISTS ALL SAVED LINES 
116f			; 'LIST #(CR)' START LIST AT THIS LINE # 
116f			; YOU CAN STOP THE LISTING BY CONTROL C KEY 
116f			; 
116f			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)' 
116f			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK- 
116f			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS. 
116f			; 
116f			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS 
116f			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO 
116f			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT 
116f			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS 
116f			; SPECIFIED, 6 POSITIONS WILL BE USED. 
116f			; 
116f			; IF A & IS THE FIRST CHARACTER, THE NUMBER FOLLOWING IS  
116f			; PRINTED AS HEXADECIMAL.  IF NUMBER IS GREATER THAN 255 
116f			; THEN H IS PRINTED FIRST THEN L WITH NO SPACE BETWEEN 
116f			; 
116f			; IF A % IS THE FIRST CHARACTER, THE NUMBER IS PRINTED 
116f			; AS AN ASCII CHARCTER.  IF THE CARACTER IS NOT PRINTABLE 
116f			; A '.' WILL BE PRINTED. 
116f			; 
116f			; IF IA $ IS THE FIRST CHARACTER, THE NUMBER IS PRINTED 
116f			; AS AN ASCII CHARCTER BUT ALL ASCII CHARACTERS ARE PRINTED 
116f			; BETWEEN 0 AND 128 
116f			; 
116f			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF 
116f			; DOUBLE QUOTES. 
116f			; 
116f			; A UNDERSCORE MEANS GENERATE A (CR) WITHOUT (LF) 
116f			; 
116f			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN 
116f			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST 
116f			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED. 
116f			;************************************************************* 
116f			 
116f			LIST: 
116f cd 6f 10		        CALL TSTNUM                     ;TEST IF THERE IS A # 
1172 cd 23 15		        CALL ENDCHK                     ;IF NO # WE GET A 0 
1175 cd 9e 15		        CALL FNDLN                      ;FIND THIS OR NEXT LINE 
1178			LS1: 
1178 da b3 10		        JP C,RSTART                     ;C:PASSED TXTUNF 
117b cd 41 16		        CALL PRTLN                      ;PRINT THE LINE 
117e cd 3e 17		        CALL CHKIO                      ;STOP IF HIT CONTROL-C 
1181 cd a6 15		        CALL FNDLP                      ;FIND NEXT LINE 
1184 18 f2		        JR LS1                          ;AND LOOP BACK 
1186			PRINT: 
1186 0e 06		        LD C,06H                        ;C = # OF SPACES 
1188 cd 06 10		        CALL RST08                         ;F NULL LIST & ";" 
118b ..			        DB ";" 
118c 05			        DB PR2-$-1 
118d cd 0e 10		        CALL CRLF                       ;GIVE CR-LF AND 
1190 18 c4		        JR RUNSML                       ;CONTINUE SAME LINE 
1192			PR2: 
1192 cd 06 10		        CALL RST08                         ;IF NULL LIST (CR) 
1195 0d			        DB CR 
1196 05			        DB PR0-$-1 
1197 cd 0e 10		        CALL CRLF                       ;ALSO GIVE CR-LF AND 
119a 18 aa		        JR RUNNXL                       ;GO TO NEXT LINE 
119c			PR0: 
119c cd 06 10		        CALL RST08                         ;ELSE IS IT FORMAT? 
119f ..			        DB '#' 
11a0 06			        DB PR9-$-1 
11a1 cd 18 10		        CALL RST18                         ;YES, EVALUATE EXPR. 
11a4 4d			        LD C,L                             ;AND SAVE IT IN C 
11a5 18 2c		        JR PR3                             ;LOOK FOR MORE TO PRINT 
11a7			PR9: 
11a7 cd 06 10		        CALL RST08                         ;ELSE IS IT PRINT AS HEXIDECIMAL? 
11aa ..			        DB '&' 
11ab 08			        DB PR10-$-1 
11ac cd 18 10		        CALL RST18                         ;YES, EVALUATE EXPR. 
11af cd 68 16		        CALL PRTHEX 
11b2 18 1f		        JR PR3 
11b4			PR10: 
11b4 cd 06 10		        CALL RST08                         ;ELSE IS IT PRINT AS ASCII? 
11b7 ..			        DB '%'                             ;FOR ASCII PRINTING? 
11b8 08			        DB PR11-$-1 
11b9 cd 18 10		        CALL RST18                         ;YES, EVALUATE EXPR. 
11bc cd 5b 16		        CALL PRTASC                        ;PRINT ONLY PRINTABLE ASCII         
11bf 18 12		        JR PR3 
11c1			PR11: 
11c1 cd 06 10		        CALL RST08                         ;ELSE IS IT CHR$? 
11c4 ..			        DB '$' 
11c5 08			        DB PR1-$-1 
11c6 cd 18 10		        CALL RST18                         ;YES, EVALUATE EXPR. 
11c9 cd 55 16		        CALL PRTCHR                        ;PRINT THE ASCII VALUE 
11cc 18 05		        JR PR3 
11ce			PR1: 
11ce cd d2 15		        CALL QTSTG                      ;OR IS IT A STRING? 
11d1 18 10		        JR PR8                          ;IF NOT, MUST BE EXPR. 
11d3			PR3: 
11d3 cd 06 10		        CALL RST08                         ;IF ",", GO FIND NEXT 
11d6 ..			        DB ',' 
11d7 05			        DB PR6-$-1 
11d8 cd 10 15		        CALL FIN                        ;IN THE LIST. 
11db 18 bf		        JR PR0                          ;LIST CONTINUES 
11dd			PR6: 
11dd cd 0e 10		        CALL CRLF                       ;LIST ENDS 
11e0 cd 2c 10		        CALL RST30 
11e3			PR8: 
11e3 cd 18 10		        CALL RST18                         ;EVALUATE THE EXPR 
11e6 c5			        PUSH BC 
11e7 cd 01 16		        CALL PRTNUM                     ;PRINT THE VALUE 
11ea c1			        POP BC 
11eb 18 e6		        JR PR3                          ;MORE TO PRINT? 
11ed			 
11ed			;************************************************************* 
11ed			; 
11ed			; *** GOSUB *** & RETURN *** 
11ed			; 
11ed			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO' 
11ed			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER 
11ed			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE 
11ed			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED 
11ed			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED. 
11ed			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS 
11ed			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS' 
11ed			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE), 
11ed			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S. 
11ed			; 
11ed			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS 
11ed			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT 
11ed			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE 
11ed			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR. 
11ed			;************************************************************* 
11ed			 
11ed			GOSUB: 
11ed cd b7 16		        CALL PUSHA                      ;SAVE THE CURRENT "FOR" 
11f0 cd 18 10		        CALL RST18                         ;PARAMETERS 
11f3 d5			        PUSH DE                         ;AND TEXT POINTER 
11f4 cd 9e 15		        CALL FNDLN                      ;FIND THE TARGET LINE 
11f7 c2 99 10		        JP NZ,AHOW                      ;NOT THERE. SAY "HOW?" 
11fa 2a 01 20		        LD HL,(CURRNT)                  ;FOUND IT, SAVE OLD. 
11fd e5			        PUSH HL                         ;'CURRNT' OLD 'STKGOS' 
11fe 2a 03 20		        LD HL,(STKGOS) 
1201 e5			        PUSH HL 
1202 21 00 00		        LD HL,0000H                     ;AND LOAD NEW ONES 
1205 22 09 20		        LD (LOPVAR),HL 
1208 39			        ADD HL,SP 
1209 22 03 20		        LD (STKGOS),HL 
120c c3 4f 11		        JP RUNTSL                       ;THEN RUN THAT LINE 
120f			RETURN: 
120f cd 23 15		        CALL ENDCHK                     ;THERE MUST BE A CR 
1212 2a 03 20		        LD HL,(STKGOS)                  ;OLD STACK POINTER 
1215 7c			        LD A,H                          ;0 MEANS NOT EXIST 
1216 b5			        OR L 
1217 ca 29 15		        JP Z,QWHAT                      ;SO, WE SAY: "WHAT?" 
121a f9			        LD SP,HL                        ;ELSE, RESTORE IT 
121b e1			        POP HL 
121c 22 03 20		        LD (STKGOS),HL                  ;AND THE OLD "STKGOS" 
121f e1			        POP HL 
1220 22 01 20		        LD (CURRNT),HL                  ;AND THE OLD 'CURRNT' 
1223 d1			        POP DE                          ;OLD TEXT POINTER 
1224 cd 9c 16		        CALL POPA                       ;OLD "FOR" PARAMETERS 
1227 cd 2c 10		        CALL RST30                         ;AND WE ARE BACK HOME 
122a			 
122a			;************************************************************* 
122a			; 
122a			; *** FOR *** & NEXT *** 
122a			; 
122a			; 'FOR' HAS TWO FORMS: 
122a			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2' 
122a			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH 
122a			; EXP3=1.  (I.E., WITH A STEP OF +1.) 
122a			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE 
122a			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3 
122a			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN 
122a			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC', 
122a			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME- 
122a			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO 
122a			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK 
122a			; BEFORE THE NEW ONE OVERWRITES IT. 
122a			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME 
122a			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP. 
122a			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED. 
122a			; (PURGED FROM THE STACK..) 
122a			; 
122a			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL) 
122a			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED 
122a			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN 
122a			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT 
122a			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO 
122a			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT 
122a			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND 
122a			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA 
122a			; IS PURGED AND EXECUTION CONTINUES. 
122a			;************************************************************* 
122a			 
122a			FOR: 
122a cd b7 16		        CALL PUSHA                      ;SAVE THE OLD SAVE AREA 
122d cd f7 14		        CALL SETVAL                     ;SET THE CONTROL VAR. 
1230 2b			        DEC HL                          ;HL IS ITS ADDRESS 
1231 22 09 20		        LD (LOPVAR),HL                  ;SAVE THAT 
1234 21 1a 18		        LD HL,TAB5-1                    ;USE 'EXEC' TO LOOK 
1237 c3 42 18		        JP EXEC                         ;FOR THE WORK 'TO' 
123a			FR1: 
123a cd 18 10		        CALL RST18                         ;EVALUATE THE LIMITE 
123d 22 0d 20		        LD (LOPLMT),HL                  ;SAVE THAT 
1240 21 20 18		        LD HL,TAB6-1                    ;USE 'EXEC' TO LOOK 
1243 c3 42 18		        JP EXEC                         ;FOR THE WORD 'STEP' 
1246			FR2: 
1246 cd 18 10		        CALL RST18                         ;FOUND IT, GET STEP 
1249 18 03		        JR FR4 
124b			FR3: 
124b 21 01 00		        LD HL,0001H                     ;NOT FOUND, SET TO 1 
124e			FR4: 
124e 22 0b 20		        LD (LOPINC),HL                  ;SAVE THAT TOO 
1251			FR5: 
1251 2a 01 20		        LD HL,(CURRNT)                  ;SAVE CURRENT LINE # 
1254 22 0f 20		        LD (LOPLN),HL 
1257 eb			        EX DE,HL                        ;AND TEXT POINTER 
1258 22 11 20		        LD (LOPPT),HL 
125b 01 0a 00		        LD BC,0AH                       ;DIG INTO STACK TO 
125e 2a 09 20		        LD HL,(LOPVAR)                  ;FIND 'LOPVAR' 
1261 eb			        EX DE,HL 
1262 60			        LD H,B 
1263 68			        LD L,B                          ;HL=0 NOW 
1264 39			        ADD HL,SP                       ;HERE IS THE STACK 
1265			FR7: 
1265 09			        ADD HL,BC                       ;EACH LEVEL IS 10 DEEP - DIS = 09 
1266 7d			        LD A,L 
1267 81			        ADD A,C 
1268 38 18		        JR C,FR8 
126a 7e			        LD A,(HL) 
126b 2b			        DEC HL 
126c ba			        CP D                            ;SAME AS THIS ONE? 
126d 20 f6		        JR NZ,FR7 
126f 7e			        LD A,(HL)                       ;THE OTHER HALF? 
1270 bb			        CP E 
1271 20 f2		        JR NZ,FR7 
1273 eb			        EX DE,HL                        ;YES, FOUND ONE 
1274 21 00 00		        LD HL,0000H 
1277 39			        ADD HL,SP                       ;TRY TO MOVE SP 
1278 44			        LD B,H 
1279 4d			        LD C,L 
127a 21 0a 00		        LD HL,000AH 
127d 19			        ADD HL,DE 
127e cd 8e 16		        CALL MVDOWN                     ;AND PURGE 10 WORDS 
1281 f9			        LD SP,HL                        ;IN THE STACK 
1282			FR8: 
1282 2a 11 20		        LD HL,(LOPPT)                   ;JOB DONE, RESTORE DE 
1285 eb			        EX DE,HL 
1286 cd 2c 10		        CALL RST30                         ;AND CONTINUE 
1289			; 
1289			NEXT: 
1289 cd 33 10		        CALL RST38                         ;GET ADDRESS OF VAR. 
128c da 29 15		        JP C,QWHAT                      ;NO VARIABLE, "WHAT?" 
128f 22 05 20		        LD (VARNXT),HL                  ;YES, SAVE IT 
1292			NX0: 
1292 d5			        PUSH DE                         ;SAVE TEXT POINTER 
1293 eb			        EX DE,HL 
1294 2a 09 20		        LD HL,(LOPVAR)                  ;GET VAR. IN 'FOR' 
1297 7c			        LD A,H 
1298 b5			        OR L                            ;0 SAYS NEVER HAD ONE 
1299 ca 2a 15		        JP Z,AWHAT                      ;SO WE ASK: "WHAT?" 
129c cd 1f 10		        CALL RST20                         ;ELSE WE CHECK THEM 
129f 28 09		        JR Z,NX3                        ;OK, THEY AGREE 
12a1 d1			        POP DE                          ;NO, LET'S SEE 
12a2 cd 9c 16		        CALL POPA                       ;PURGE CURRENT LOOP 
12a5 2a 05 20		        LD HL,(VARNXT)                  ;AND POP ONE LEVEL 
12a8 18 e8		        JR NX0                          ;GO CHECK AGAIN 
12aa			NX3: 
12aa 5e			        LD E,(HL)                       ;COME HERE WHEN AGREED 
12ab 23			        INC HL 
12ac 56			        LD D,(HL)                       ;DE=VALUE OF VAR. 
12ad 2a 0b 20		        LD HL,(LOPINC) 
12b0 e5			        PUSH HL 
12b1 7c			        LD A,H 
12b2 aa			        XOR D 
12b3 7a			        LD A,D 
12b4 19			        ADD HL,DE                       ;ADD ONE STEP 
12b5 fa bc 12		        JP M,NX4 
12b8 ac			        XOR H 
12b9 fa df 12		        JP M,NX5 
12bc			NX4: 
12bc eb			        EX DE,HL 
12bd 2a 09 20		        LD HL,(LOPVAR)                  ;PUT IT BACK 
12c0 73			        LD (HL),E 
12c1 23			        INC HL 
12c2 72			        LD (HL),D 
12c3 2a 0d 20		        LD HL,(LOPLMT)                  ;HL->LIMIT 
12c6 f1			        POP AF                          ;OLD HL 
12c7 b7			        OR A 
12c8 f2 cc 12		        JP P,NX1                        ;STEP > 0 
12cb eb			        EX DE,HL                        ;STEP < 0 
12cc			NX1: 
12cc cd ee 14		        CALL CKHLDE                     ;COMPARE WITH LIMIT 
12cf d1			        POP DE                          ;RESTORE TEXT POINTER 
12d0 38 0f		        JR C,NX2                        ;OUTSIDE LIMIT 
12d2 2a 0f 20		        LD HL,(LOPLN)                   ;WITHIN LIMIT, GO 
12d5 22 01 20		        LD (CURRNT),HL                  ;BACK TO THE SAVED 
12d8 2a 11 20		        LD HL,(LOPPT)                   ;'CURRNT' AND TEXT 
12db eb			        EX DE,HL                        ;POINTER 
12dc cd 2c 10		        CALL RST30 
12df			NX5: 
12df e1			        POP HL 
12e0 d1			        POP DE 
12e1			NX2: 
12e1 cd 9c 16		        CALL POPA                       ;PURGE THIS LOOP 
12e4 cd 2c 10		        CALL RST30 
12e7			 
12e7			;************************************************************* 
12e7			; 
12e7			; *** REM *** IF *** INPUT *** & LET (& DEFLT) *** 
12e7			; 
12e7			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI. 
12e7			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION. 
12e7			; 
12e7			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE 
12e7			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS. 
12e7			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE 
12e7			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE 
12e7			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND 
12e7			; EXECUTION CONTINUES AT THE NEXT LINE. 
12e7			; 
12e7			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED 
12e7			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR 
12e7			; DOUBLE QUOTES, OR IS A UNDERSCORE, IT HAS THE SAME EFFECT AS 
12e7			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS 
12e7			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN 
12e7			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE 
12e7			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING 
12e7			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE 
12e7			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR. 
12e7			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR. 
12e7			; 
12e7			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?", 
12e7			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT. 
12e7			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C. 
12e7			; THIS IS HANDLED IN 'INPERR'. 
12e7			; 
12e7			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS. 
12e7			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR. 
12e7			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE. 
12e7			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'. 
12e7			; THIS IS DONE BY 'DEFLT'. 
12e7			;************************************************************* 
12e7			 
12e7			REM: 
12e7 21 00 00		        LD HL,0000H                     ;*** REM *** 
12ea 18 03		        JR IF1                        
12ec			IFF: 
12ec cd 18 10		        CALL RST18                         ;*** IF *** 
12ef			IF1: 
12ef 7c			        LD A,H                          ;IS THE EXPR.=0? 
12f0 b5			        OR L 
12f1 c2 56 11		        JP NZ,RUNSML                    ;NO, CONTINUE 
12f4 cd bd 15		        CALL FNDSKP                     ;YES, SKIP REST OF LINE 
12f7 d2 4f 11		        JP NC,RUNTSL                    ;AND RUN THE NEXT LINE 
12fa c3 b3 10		        JP RSTART                       ;IF NO NEXT, RE-START 
12fd			INPERR: 
12fd 2a 07 20		        LD HL,(STKINP)                  ;*** INPERR *** 
1300 f9			        LD SP,HL                        ;RESTORE OLD SP 
1301 e1			        POP HL                          ;AND OLD 'CURRNT' 
1302 22 01 20		        LD (CURRNT),HL 
1305 d1			        POP DE                          ;AND OLD TEXT POINTER 
1306 d1			        POP DE                          ;REDO INPUT 
1307			INPUT:                                  ;*** INPUT *** 
1307			IP1: 
1307 d5			        PUSH DE                         ;SAVE IN CASE OF ERROR 
1308 cd d2 15		        CALL QTSTG                      ;IS NEXT ITEM A STRING? 
130b 18 07		        JR IP2                          ;NO 
130d cd 33 10		        CALL RST38                         ;YES, BUT FOLLOWED BY A 
1310 38 40		        JR C,IP4                        ;VARIABLE? NO. 
1312 18 12		        JR IP3                          ;YES. INPUT VARIABLE 
1314			IP2: 
1314 d5			        PUSH DE                         ;SAVE FOR 'PRTSTG' 
1315 cd 33 10		        CALL RST38                         ;MUST BE VARIABLE NOW 
1318 da 29 15		        JP C,QWHAT                      ;"WHAT?" IT IS NOT? 
131b 1a			        LD A,(DE)                       ;GET READY FOR 'PRTSTR' 
131c 4f			        LD C,A 
131d 97			        SUB A 
131e 12			        LD (DE),A 
131f d1			        POP DE 
1320 cd c5 15		        CALL PRTSTG                     ;PRINT STRING AS PROMPT 
1323 79			        LD A,C                          ;RESTORE TEXT 
1324 1b			        DEC DE 
1325 12			        LD (DE),A 
1326			IP3: 
1326 d5			        PUSH DE                         ;SAVE TEXT POINTER 
1327 eb			        EX DE,HL 
1328 2a 01 20		        LD HL,(CURRNT)                  ;ALSO SAVE 'CURRNT' 
132b e5			        PUSH HL 
132c 21 07 13		        LD HL,IP1                       ;A NEGATIVE NUMBER 
132f 22 01 20		        LD (CURRNT),HL                  ;AS A FLAG 
1332 21 00 00		        LD HL,0000H                     ;SAVE SP TOO 
1335 39			        ADD HL,SP 
1336 22 07 20		        LD (STKINP),HL 
1339 d5			        PUSH DE                         ;OLD HL 
133a 3e 3a		        LD A,3AH                        ;PRINT THIS TOO 
133c cd 5e 15		        CALL GETLN                      ;AND GET A LINE 
133f 11 37 3f		        LD DE,BUFFER                    ;POINTS TO BUFFER 
1342 cd 18 10		        CALL RST18                         ;EVALUATE INPUT 
1345 00			        NOP                             ;CAN BE 'CALL ENDCHK' 
1346 00			        NOP 
1347 00			        NOP 
1348 d1			        POP DE                          ;OK,GET OLD HL 
1349 eb			        EX DE,HL 
134a 73			        LD (HL),E                       ;SAVE VALUE IN VAR. 
134b 23			        INC HL 
134c 72			        LD (HL),D 
134d e1			        POP HL                          ;GET OLD 'CURRNT' 
134e 22 01 20		        LD (CURRNT),HL 
1351 d1			        POP DE                          ;AND OLD TEXT POINTER 
1352			IP4: 
1352 f1			        POP AF                          ;PURGE JUNK IN STACK 
1353 cd 06 10		        CALL RST08                         ;IS NEXT CH. ','? 
1356 ..			        DB ',' 
1357 02			        DB IP5-$-1 
1358 18 ad		        JR IP1                          ;YES, MORE ITEMS. 
135a			IP5: 
135a cd 2c 10		        CALL RST30 
135d			DEFLT: 
135d 1a			        LD A,(DE)                       ;***  DEFLT *** 
135e fe 0d		        CP CR                           ;EMPTY LINE IS OK 
1360 28 0a		        JR Z,LT1                        ;ELSE IT IS 'LET' 
1362			LET: 
1362 cd f7 14		        CALL SETVAL                     ;*** LET *** 
1365 cd 06 10		        CALL RST08                         ;SET VALUE TO VAR 
1368 ..			        DB ','                          ;IS NEXT CH. ','? 
1369 02			        DB LT1-$-1                       
136a 18 f6		        JR LET                          ;ITEM BY ITEM 
136c			LT1: 
136c cd 2c 10		        CALL RST30                         ;UNTIL FINISH 
136f			;************************************************************* 
136f			; 
136f			; *** EXPR *** 
136f			; 
136f			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS. 
136f			; <EXPR>::<EXPR2> 
136f			;         <EXPR2><REL.OP.><EXPR2> 
136f			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE 
136f			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE. 
136f			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....) 
136f			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS. 
136f			; <EXPR3>::=<EXPR4>(* OR /)<EXPR4>(....) 
136f			; <EXPR4>::=<VARIABLE> 
136f			;           <FUNCTION> 
136f			;           (<EXPR>) 
136f			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR> 
136f			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND 
136f			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE. 
136f			;************************************************************* 
136f			 
136f			EXPR1: 
136f 21 28 18		        LD HL,TAB8-1                    ;LOOKUP REL.OP. 
1372 c3 42 18		        JP EXEC                         ;GO DO IT 
1375			XP11: 
1375 cd 9e 13		        CALL XP18                       ;REL.OP.">=" 
1378 d8			        RET C                           ;NO, RETURN HL=0 
1379 6f			        LD L,A                          ;YES, RETURN HL=1 
137a c9			        RET 
137b			XP12: 
137b cd 9e 13		        CALL XP18                       ;REL.OP."#" 
137e c8			        RET Z                           ;FALSE, RETURN HL=0 
137f 6f			        LD L,A                          ;TRUE, RETURN HL=1 
1380 c9			        RET 
1381			XP13: 
1381 cd 9e 13		        CALL XP18                       ;REL.OP.">" 
1384 c8			        RET Z                           ;FALSE 
1385 d8			        RET C                           ;ALSO FALSE, HL=0 
1386 6f			        LD L,A                          ;TRUE, HL=1 
1387 c9			        RET 
1388			XP14: 
1388 cd 9e 13		        CALL XP18                       ;REL.OP."<=" 
138b 6f			        LD L,A                          ;SET HL=1 
138c c8			        RET Z                           ;REL. TRUE, RETURN 
138d d8			        RET C 
138e 6c			        LD L,H                          ;ELSE SET HL=0 
138f c9			        RET 
1390			XP15: 
1390 cd 9e 13		        CALL XP18                       ;REL.OP."=" 
1393 c0			        RET NZ                          ;FALSE, RETURN HL=0 
1394 6f			        LD L,A                          ;ELSE SET HL=1 
1395 c9			        RET 
1396			XP16: 
1396 cd 9e 13		        CALL XP18                       ;REL.OP."<" 
1399 d0			        RET NC                          ;FALSE, RETURN HL=0 
139a 6f			        LD L,A                          ;ELSE SET HL=1 
139b c9			        RET 
139c			XP17: 
139c e1			        POP HL                          ;NOT .REL.OP 
139d c9			        RET                             ;RETURN HL=<EXPR2> 
139e			XP18: 
139e 79			        LD A,C                          ;SUBROUTINE FOR ALL 
139f e1			        POP HL                          ;REL.OP.'S 
13a0 c1			        POP BC 
13a1 e5			        PUSH HL                         ;REVERSE TOP OF STACK 
13a2 c5			        PUSH BC 
13a3 4f			        LD C,A 
13a4 cd b3 13		        CALL EXPR2                      ;GET 2ND <EXPR2> 
13a7 eb			        EX DE,HL                        ;VALUE IN DE NOW 
13a8 e3			        EX (SP),HL                      ;1ST <EXPR2> IN HL 
13a9 cd ee 14		        CALL CKHLDE                     ;COMPARE 1ST WITH 2ND 
13ac d1			        POP DE                          ;RESTORE TEXT POINTER 
13ad 21 00 00		        LD HL,0000H                     ;SET HL=0, A=1 
13b0 3e 01		        LD A,01H 
13b2 c9			        RET 
13b3			EXPR2: 
13b3 cd 06 10		        CALL RST08                         ;NEGATIVE SIGN? 
13b6 ..			        DB '-' 
13b7 05			        DB XP21-$-1 
13b8 21 00 00		        LD HL,0000H                     ;YES, FAKE '0-' 
13bb 18 27		        JR XP26                         ;TREAT LIKE SUBTRACT 
13bd			XP21: 
13bd cd 06 10		        CALL RST08                         ;POSITIVE SIGN? IGNORE 
13c0 ..			        DB '+' 
13c1 00			        DB XP22-$-1 
13c2			XP22: 
13c2 cd ed 13		        CALL EXPR3                      ;1ST <EXPR3> 
13c5			XP23: 
13c5 cd 06 10		        CALL RST08                         ;ADD? 
13c8 ..			        DB  '+' 
13c9 15			        DB XP25-$-1 
13ca e5			        PUSH HL                         ;YES, SAVE VALUE 
13cb cd ed 13		        CALL EXPR3                      ;GET 2ND <EXPR3> 
13ce			XP24: 
13ce eb			        EX DE,HL                        ;2ND IN DE 
13cf e3			        EX (SP),HL                      ;1ST IN HL 
13d0 7c			        LD A,H                          ;COMPARE SIGN 
13d1 aa			        XOR D 
13d2 7a			        LD A,D 
13d3 19			        ADD HL,DE 
13d4 d1			        POP DE                          ;RESTORE TEXT POINTER 
13d5 fa c5 13		        JP M,XP23                       ;1ST AND 2ND SIGN DIFFER 
13d8 ac			        XOR H                           ;1ST AND 2ND SIGN EQUAL 
13d9 f2 c5 13		        JP P,XP23                       ;SO IS RESULT 
13dc c3 98 10		        JP QHOW                         ;ELSE WE HAVE OVERFLOW 
13df			XP25: 
13df cd 06 10		        CALL RST08                         ;SUBTRACT? 
13e2 ..			        DB '-' 
13e3 8b			        DB XP42-$-1 
13e4			XP26: 
13e4 e5			        PUSH HL                         ;YES, SAVE 1ST <EXPR3> 
13e5 cd ed 13		        CALL EXPR3                      ;GET 2ND <EXPR3> 
13e8 cd dc 14		        CALL CHGSGN                     ;NEGATE 
13eb 18 e1		        JR XP24                         ;AND ADD THEM 
13ed			; 
13ed			EXPR3: 
13ed cd 4c 14		        CALL EXPR4                      ;GET 1ST <EXPR4> 
13f0			XP31: 
13f0 cd 06 10		        CALL RST08                         ;MULTIPLY? 
13f3 ..			        DB '*' 
13f4 29			        DB XP34-$-1 
13f5 e5			        PUSH HL                         ;YES, SAVE 1ST 
13f6 cd 4c 14		        CALL EXPR4                      ;AND GET 2ND <EXPR4> 
13f9 06 00		        LD B,00H                        ;CLEAR B FOR SIGN 
13fb cd d9 14		        CALL CHKSGN                     ;CHECK SIGN 
13fe e3			        EX (SP),HL                      ;1ST IN HL 
13ff cd d9 14		        CALL CHKSGN                     ;CHECK SIGN OF 1ST 
1402 eb			        EX DE,HL 
1403 e3			        EX (SP),HL 
1404 7c			        LD A,H                          ;IS HL > 255 ? 
1405 b7			        OR A 
1406 28 06		        JR Z,XP32                       ;NO 
1408 7a			        LD A,D                          ;YES, HOW ABOUT DE 
1409 b2			        OR D 
140a eb			        EX DE,HL                        ;PUT SMALLER IN HL 
140b c2 99 10		        JP NZ,AHOW                      ;ALSO >, WILL OVERFLOW 
140e			XP32: 
140e 7d			        LD A,L                          ;THIS IS DUMB 
140f 21 00 00		        LD HL,0000H                     ;CLEAR RESULT 
1412 b7			        OR A                            ;ADD AND COUNT 
1413 28 2a		        JR Z,XP35 
1415			XP33: 
1415 19			        ADD HL,DE 
1416 da 99 10		        JP C,AHOW                       ;OVERFLOW 
1419 3d			        DEC A 
141a 20 f9		        JR NZ,XP33 
141c 18 21		        JR XP35                         ;FINISHED 
141e			XP34: 
141e cd 06 10		        CALL RST08                         ;DIVIDE? 
1421 ..			        DB '/' 
1422 4c			        DB XP42-$-1 
1423 e5			        PUSH HL                         ;YES, SAVE 1ST <EXPR4> 
1424 cd 4c 14		        CALL EXPR4                      ;AND GET THE SECOND ONE 
1427 06 00		        LD B,00H                        ;CLEAR B FOR SIGN 
1429 cd d9 14		        CALL CHKSGN                     ;CHECK SIGN OF 2ND 
142c e3			        EX (SP),HL                      ;GET 1ST IN HL 
142d cd d9 14		        CALL CHKSGN                     ;CHECK SIGN OF 1ST 
1430 eb			        EX DE,HL 
1431 e3			        EX (SP),HL 
1432 eb			        EX DE,HL 
1433 7a			        LD A,D                          ;DIVIDE BY 0? 
1434 b3			        OR E 
1435 ca 99 10		        JP Z,AHOW                       ;SAY "HOW?" 
1438 c5			        PUSH BC                         ;ELSE SAVE SIGN 
1439 cd bd 14		        CALL DIVIDE                     ;USE SUBROUTINE 
143c 60			        LD H,B                          ;RESULT IN HL NOW 
143d 69			        LD L,C 
143e c1			        POP BC                          ;GET SIGN BACK 
143f			XP35: 
143f d1			        POP DE                          ;AND TEXT POINTER 
1440 7c			        LD A,H                          ;HL MUST BE + 
1441 b7			        OR A 
1442 fa 98 10		        JP M,QHOW                       ;ELSE IT IS OVERFLOW 
1445 78			        LD A,B 
1446 b7			        OR A 
1447 fc dc 14		        CALL M,CHGSGN                   ;CHANGE SIGN IF NEEDED 
144a 18 a4		        JR XP31                         ;LOOK FOR MORE TERMS 
144c			EXPR4: 
144c 21 02 18		        LD HL,TAB4-1                    ;FIND FUNCTION IN TAB4 
144f c3 42 18		        JP EXEC                         ;AND GO DO IT 
1452			XP40: 
1452 cd 33 10		        CALL RST38                         ;NO, NOT A FUNCTION 
1455 38 05		        JR C,XP41                       ;NOR A VARIABLE 
1457 7e			        LD A,(HL)                       ;VARIABLE 
1458 23			        INC HL 
1459 66			        LD H,(HL)                       ;VALUE IN HL 
145a 6f			        LD L,A 
145b c9			        RET 
145c			XP41: 
145c cd 6f 10		        CALL TSTNUM                     ;OR IS IT A NUMBER 
145f 78			        LD A,B                          ;# OF DIGIT 
1460 b7			        OR A 
1461 c0			        RET NZ                          ;OK 
1462			PARN: 
1462 cd 06 10		        CALL RST08 
1465 ..			        DB '(' 
1466 09			        DB XP43-$-1 
1467 cd 18 10		        CALL RST18                         ;"(EXPR)" 
146a cd 06 10		        CALL RST08 
146d ..			        DB ')' 
146e 01			        DB XP43-$-1 
146f			XP42: 
146f c9			        RET 
1470			XP43: 
1470 c3 29 15		        JP QWHAT                        ;ELSE SAY: "WHAT?" 
1473			RND: 
1473 cd 62 14		        CALL PARN                       ;*** RND(EXPR) *** 
1476 7c			        LD A,H                          ;EXPR MUST BE + 
1477 b7			        OR A 
1478 fa 98 10		        JP M,QHOW 
147b b5			        OR L                            ;AND NON-ZERO 
147c ca 98 10		        JP Z,QHOW 
147f d5			        PUSH DE                         ;SAVE BOTH 
1480 e5			        PUSH HL 
1481 2a 13 20		        LD HL,(RANPNT)                  ;GET MEMORY AS RANDOM 
1484 11 e0 18		        LD DE,LSTROM                    ;NUMBER 
1487 cd 1f 10		        CALL RST20 
148a 38 03		        JR C,RA1                        ;WRAP AROUND IF LAST 
148c 21 00 10		        LD HL,START 
148f			RA1: 
148f 5e			        LD E,(HL) 
1490 23			        INC HL 
1491 56			        LD D,(HL) 
1492 22 13 20		        LD (RANPNT),HL 
1495 e1			        POP HL 
1496 eb			        EX DE,HL 
1497 c5			        PUSH BC 
1498 cd bd 14		        CALL DIVIDE                     ;RND (N)=MOD(M,N)+1 
149b c1			        POP BC 
149c d1			        POP DE 
149d 23			        INC HL 
149e c9			        RET 
149f			ABS: 
149f cd 62 14		        CALL PARN                       ;*** ABS (EXPR) *** 
14a2 1b			        DEC DE 
14a3 cd d9 14		        CALL CHKSGN                     ;CHECK SIGN 
14a6 13			        INC DE 
14a7 c9			        RET 
14a8			PEEK: 
14a8 cd 62 14		        CALL PARN                       ;*** PEEK (EXPR) *** 
14ab 7e			        LD A,(HL)                       ;GET VALUE STORED AT EXPRESSION 
14ac 6f			        LD L,A                          ;STORE VALUE BACK INTO HL 
14ad 26 00		        LD H,00H 
14af c9			        RET 
14b0			SIZE: 
14b0 2a 15 20		        LD HL,(TXTUNF)                  ;*** SIZE *** 
14b3 d5			        PUSH DE                         ;GET THE NUMBER OF FREE 
14b4 eb			        EX DE,HL                        ;BYTES BETWEEN 'TXTUNF' 
14b5 21 00 3f		        LD HL,VARBGN                    ;AND 'VARBGN' 
14b8 cd d2 14		        CALL SUBDE 
14bb d1			        POP DE 
14bc c9			        RET 
14bd			;************************************************************* 
14bd			; 
14bd			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE *** 
14bd			; 
14bd			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL 
14bd			; 
14bd			; 'SUBDE' SUBSTRACTS DE FROM HL 
14bd			; 
14bd			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE 
14bd			; SIGN AND FLIP SIGN OF B. 
14bd			; 
14bd			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY. 
14bd			; 
14bd			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE 
14bd			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER 
14bd			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS. 
14bd			;************************************************************* 
14bd			 
14bd			DIVIDE: 
14bd e5			        PUSH HL                         ;*** DIVIDE *** 
14be 6c			        LD L,H                          ;DIVIDE H BY DE 
14bf 26 00		        LD H,00H 
14c1 cd c8 14		        CALL DV1 
14c4 41			        LD B,C                          ;SAVE RESULT IN B 
14c5 7d			        LD A,L                          ;(REMAINDER+L)/DE 
14c6 e1			        POP HL 
14c7 67			        LD H,A 
14c8			DV1: 
14c8 0e ff		        LD C,0FFH                       ;RESULT IN C 
14ca			DV2: 
14ca 0c			        INC C                           ;DUMB ROUTINE 
14cb cd d2 14		        CALL SUBDE                      ;DIVIDE BY SUBTRACT 
14ce 30 fa		        JR NC,DV2                       ;AND COUNT 
14d0 19			        ADD HL,DE 
14d1 c9			        RET 
14d2			SUBDE: 
14d2 7d			        LD A,L                          ;*** SUBDE *** 
14d3 93			        SUB E                           ;SUBSTRACT DE FROM 
14d4 6f			        LD L,A                          ;HL 
14d5 7c			        LD A,H 
14d6 9a			        SBC A,D 
14d7 67			        LD H,A 
14d8 c9			        RET 
14d9			CHKSGN: 
14d9 7c			        LD A,H                          ;*** CHKSGN *** 
14da b7			        OR A                            ;CHECK SIGN OF HL 
14db f0			        RET P 
14dc			CHGSGN: 
14dc 7c			        LD A,H                          ;*** CHGSGN *** 
14dd f5			        PUSH AF 
14de 2f			        CPL                             ;CHANGE SIGN OF HL 
14df 67			        LD H,A 
14e0 7d			        LD A,L 
14e1 2f			        CPL 
14e2 6f			        LD L,A 
14e3 23			        INC HL 
14e4 f1			        POP AF 
14e5 ac			        XOR H 
14e6 f2 98 10		        JP P,QHOW 
14e9 78			        LD A,B                          ;AND ALSO FLIP B 
14ea ee 80		        XOR 80H 
14ec 47			        LD B,A 
14ed c9			        RET 
14ee			CKHLDE: 
14ee 7c			        LD A,H                          ;SAME SIGN? 
14ef aa			        XOR D                           ;YES, COMPARE 
14f0 f2 f4 14		        JP P,CK1                        ;NO, XCHANGE AND COMP 
14f3 eb			        EX DE,HL 
14f4			CK1: 
14f4 c3 1f 10		        JP RST20 
14f7			;************************************************************* 
14f7			; 
14f7			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) *** 
14f7			; 
14f7			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND 
14f7			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE 
14f7			; TO THAT VALUE. 
14f7			; 
14f7			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";", 
14f7			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE 
14f7			; NEXT LINE AND CONTINUE FROM THERE. 
14f7			; 
14f7			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS 
14f7			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.) 
14f7			; 
14f7			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR). 
14f7			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?" 
14f7			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP 
14f7			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED 
14f7			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO 
14f7			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT 
14f7			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT' 
14f7			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS 
14f7			; NOT TERMINATED BUT CONTINUED AT 'INPERR'. 
14f7			; 
14f7			; RELATED TO 'ERROR' ARE THE FOLLOWING: 
14f7			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?" 
14f7			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'. 
14f7			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING. 
14f7			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS. 
14f7			;************************************************************* 
14f7			 
14f7			SETVAL: 
14f7 cd 33 10		        CALL RST38                         ;*** SETVAL *** 
14fa da 29 15		        JP C,QWHAT                      ;"WHAT?" NO VARIABLE 
14fd e5			        PUSH HL                         ;SAVE ADDRESS OF VAR. 
14fe cd 06 10		        CALL RST08                         ;PASS "=" SIGN 
1501 ..			        DB '=' 
1502 0a			        DB SV1-$-1 
1503 cd 18 10		        CALL RST18                         ;EVALUATE EXPR. 
1506 44			        LD B,H                          ;VALUE IS IN BC NOW 
1507 4d			        LD C,L 
1508 e1			        POP HL                          ;GET ADDRESS 
1509 71			        LD (HL),C                       ;SAVE VALUE 
150a 23			        INC HL 
150b 70			        LD (HL),B 
150c c9			        RET 
150d			SV1: 
150d c3 29 15		        JP QWHAT                        ;NO "=" SIGN 
1510			FIN: 
1510 cd 06 10		        CALL RST08                         ;*** FIN *** 
1513 ..			        DB ";" 
1514 04			        DB FI1-$-1 
1515 f1			        POP AF                          ;";", PURGE RET. ADDR. 
1516 c3 56 11		        JP RUNSML                       ;CONTINUE SAME LINE 
1519			FI1: 
1519 cd 06 10		        CALL RST08                         ;NOT ";", IS IT CR? 
151c 0d			        DB CR 
151d 04			        DB FI2-$-1 
151e f1			        POP AF                          ;YES, PURGE RET. ADDR. 
151f c3 46 11		        JP RUNNXL                       ;RUN NEXT LINE 
1522			FI2: 
1522 c9			        RET                             ;ELSE RETURN TO CALLER 
1523			ENDCHK: 
1523 cd 25 10		        CALL RST28                         ;*** ENDCHK *** 
1526 fe 0d		        CP CR                           ;END WITH CR? 
1528 c8			        RET Z                           ;OK, ELSE SAY: "WHAT?" 
1529			QWHAT: 
1529 d5			        PUSH DE                         ;*** QWHAT *** 
152a			AWHAT: 
152a 11 a7 10		        LD DE,WHAT                      ;*** AWHAT *** 
152d			ERROR_ROUTINE: 
152d 97			        SUB A                           ;*** ERROR *** 
152e cd c5 15		        CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?' 
1531 d1			        POP DE                          ;OR 'SORRY' 
1532 1a			        LD A,(DE)                       ;SAVE THE CHARACTER 
1533 f5			        PUSH AF                         ;AT WHERE OLD DE -> 
1534 97			        SUB A                           ;AND PUT A 0 THERE 
1535 12			        LD (DE),A 
1536 2a 01 20		        LD HL,(CURRNT)                  ;GET CURRENT LINE # 
1539 e5			        PUSH HL 
153a 7e			        LD A,(HL)                       ;CHECK THE VALUE 
153b 23			        INC HL 
153c b6			        OR (HL) 
153d d1			        POP DE 
153e ca b3 10		        JP Z,RSTART                     ;IF ZERO, JUST RESTART 
1541 7e			        LD A,(HL)                       ;IF NEGATIVE, 
1542 b7			        OR A 
1543 fa fd 12		        JP M,INPERR                     ;REDO INPUT 
1546 cd 41 16		        CALL PRTLN                      ;ELSE PRINT THE LINE 
1549 1b			        DEC DE                          ;UPTO WHERE THE 0 IS 
154a f1			        POP AF                          ;RESTORE THE CHARACTER 
154b 12			        LD (DE),A 
154c 3e 3f		        LD A,"?"                        ;PRINT A "?" 
154e cd 10 10		        CALL RST10 
1551 97			        SUB A                           ;AND THE REST OF THE 
1552 cd c5 15		        CALL PRTSTG                     ;LINE 
1555 c3 b3 10		        JP RSTART                       ;THEN RESTART 
1558			QSORRY: 
1558 d5			        PUSH DE                         ;*** QSORRY *** 
1559			ASORRY: 
1559 11 ad 10		        LD DE,SORRY                     ;*** ASORRY *** 
155c 18 cf		        JR ERROR_ROUTINE 
155e			;************************************************************* 
155e			; 
155e			; *** GETLN *** FNDLN (& FRIENDS) *** 
155e			; 
155e			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT 
155e			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS 
155e			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL 
155e			; ECHOS THEM BACK.  BACKSPACE IS USED TO CAUSE IT TO DELETE 
155e			; THE LAST CHARACTER (IF THERE IS ONE), AND CTRL-Z IS USED TO 
155e			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER. 
155e			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN. 
155e			; 
155e			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE 
155e			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE 
155e			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE 
155e			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z. 
155e			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE # 
155e			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF 
155e			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE 
155e			; LINE, FLAGS ARE C & NZ. 
155e			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE 
155e			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS 
155e			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH. 
155e			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #. 
155e			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH. 
155e			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH. 
155e			;************************************************************* 
155e			 
155e			GETLN: 
155e cd 10 10		        CALL RST10                         ;*** GETLN *** 
1561 11 37 3f		        LD DE,BUFFER                    ;PROMPT AND INIT. 
1564			GL1: 
1564 cd 3e 17		        CALL CHKIO                      ;CHECK KEYBOARD 
1567 28 fb		        JR Z,GL1                        ;NO INPUT, WAIT 
1569 fe 08		        CP BKSP                         ;DELETE LAST CHARACTER? 
156b 28 18		        JR Z,GL3                        ;YES 
156d cd 10 10		        CALL RST10                      ;INPUT, ECHO BACK 
1570 fe 0a		        CP LF                           ;IGNORE LF 
1572 28 f0		        JR Z,GL1 
1574 b7			        OR A                            ;IGNORE NULL 
1575 28 ed		        JR Z,GL1 
1577 fe 1a		        CP CTRLZ                        ;DELETE THE WHOLE LINE? 
1579 28 17		        JR Z,GL4                        ;YES 
157b 12			        LD (DE),A                       ;ELSE SAVE INPUT 
157c 13			        INC DE                          ;AND BUMP POINTER 
157d fe 0d		        CP CR                           ;WAS IT CR 
157f c8			        RET Z                           ;YES, END OF LINE 
1580 7b			        LD A,E                          ;ELSE MORE FREE ROOM? 
1581 fe 87		        CP BUFEND & 0FFH 
1583 20 df		        JR NZ,GL1                       ;YES, GET NEXT INPUT 
1585			GL3: 
1585 7b			        LD A,E                          ;DELETE LAST CHARACTER 
1586 fe 37		        CP BUFFER & 0FFH                ;BUT DO WE HAVE ANY? 
1588 28 08		        JR Z,GL4                        ;NO, REDO WHOLE LINE 
158a 1b			        DEC DE                          ;YES, BACKUP POINTER 
158b 3e 5c		        LD A,5CH                        ;AND ECHO A BACK-SLASH 
158d cd 10 10		        CALL RST10 
1590 18 d2		        JR GL1                          ;GO GET NEXT INPUT 
1592			GL4: 
1592 cd 0e 10		        CALL CRLF                       ;REDO ENTIRE LINE 
1595 3e 0b		        LD A,VT                         ;CR, LF AND UP-ARROW 
1597 cd 10 10		        CALL RST10 
159a 3e 3e		        LD A,">" 
159c 18 c0		        JR GETLN 
159e			FNDLN: 
159e 7c			        LD A,H                          ;*** FNDLN *** 
159f b7			        OR A                            ;CHECK SIGN OF HL 
15a0 fa 98 10		        JP M,QHOW                       ;IT CANNOT BE - 
15a3 11 17 20		        LD DE,TXTBGN                    ;INIT TEXT POINTER 
15a6			FNDLP:                                  ;*** FDLNP *** 
15a6			FL1: 
15a6 e5			        PUSH HL                         ;SAVE LINE # 
15a7 2a 15 20		        LD HL,(TXTUNF)                  ;CHECK IF WE PASSED END 
15aa 2b			        DEC HL 
15ab cd 1f 10		        CALL RST20 
15ae e1			        POP HL                          ;GET LINE # BACK 
15af d8			        RET C                           ;C,NZ PASSED END 
15b0 1a			        LD A,(DE)                       ;WE DID NOT, GET BYTE 1 
15b1 95			        SUB L                           ;IS THIS THE LINE? 
15b2 47			        LD B,A                          ;COMPARE LOW ORDER 
15b3 13			        INC DE 
15b4 1a			        LD A,(DE)                       ;GET BYTE 2 
15b5 9c			        SBC A,H                         ;COMPARE HIGH ORDER 
15b6 38 04		        JR C,FL2                        ;NO, NOT THERE YET 
15b8 1b			        DEC DE                          ;ELSE WE EITHER FOUND 
15b9 b0			        OR B                            ;IT, OR IT IS NOT THERE 
15ba c9			        RET                             ;NC,Z;FOUND, NC,NZ:NO 
15bb			FNDNXT:                                 ;*** FNDNXT *** 
15bb 13			        INC DE                          ;FIND NEXT LINE 
15bc			FL2: 
15bc 13			        INC DE                          ;JUST PASSED BYTE 1 & 2 
15bd			FNDSKP: 
15bd 1a			        LD A,(DE)                       ;*** FNDSKP *** 
15be fe 0d		        CP CR                           ;TRY TO FIND CR 
15c0 20 fa		        JR NZ,FL2                       ;KEEP LOOKING 
15c2 13			        INC DE                          ;FOUND CR, SKIP OVER 
15c3 18 e1		        JR FL1                          ;CHECK IF END OF TEXT 
15c5			;************************************************************* 
15c5			; 
15c5			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN *** 
15c5			; 
15c5			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING 
15c5			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN 
15c5			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE 
15c5			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST. 
15c5			; 
15c5			; 'QTSTG' LOOKS FOR A UNDERSCORE, SINGLE QUOTE, OR DOUBLE 
15c5			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF UNDERSCORE, 
15c5			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT 
15c5			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE. 
15c5			; AFTER THE PRINTING THE NEXT 2 BYTES OF THE CALLER IS SKIPPED 
15c5			; OVER (USUALLY A JUMP INSTRUCTION. 
15c5			; 
15c5			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED 
15c5			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C. 
15c5			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN 
15c5			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO 
15c5			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT. 
15c5			; 
15c5			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL. 
15c5			; 
15c5			; 'PRTCHR' PRINTS THE VALUE IN L AS AN ASCII CHARACTER.  THIS 
15c5			; WILL PRINT NON ASCII CHARACTERS TOO.  IE: ^G (BEL)  
15c5			; 
15c5			; 'PRTASC' PRINTS THE VALUE IN L AS AN ASCII  
15c5			; 
15c5			; 'PRTHEX' PRINTS THE VALUE IN HL AS A HEXIDECIMAL NUMBER.  
15c5			; HL IS TWO BYTES, SO TWO HEX VALUES WILL BE DISPLAYED.  
15c5			; IF H IS ZERO THEN ONLY ONE BYTE WILL BE DISPLAYED. 
15c5			; 
15c5			;************************************************************* 
15c5			 
15c5			PRTSTG: 
15c5 47			        LD B,A                          ;*** PRTSTG *** 
15c6			PS1: 
15c6 1a			        LD A,(DE)                       ;GET A CHARACTER 
15c7 13			        INC DE                          ;BUMP POINTER 
15c8 b8			        CP B                            ;SAME AS OLD A? 
15c9 c8			        RET Z                           ;YES, RETURN 
15ca cd 10 10		        CALL RST10                         ;NO, NEXT 
15cd fe 0d		        CP CR                           ;WAS IT A CR? 
15cf 20 f5		        JR NZ,PS1                       ;NO, NEXT 
15d1 c9			        RET                             ;YES, RETURN 
15d2			QTSTG: 
15d2 cd 06 10		        CALL RST08                         ;*** QTSTG *** 
15d5 22			        DB 22H 
15d6 0e			        DB QT3-$-1 
15d7 3e 22		        LD A,22H                        ;IT IS A " 
15d9			QT1: 
15d9 cd c5 15		        CALL PRTSTG                     ;PRINT UNTIL ANOTHER 
15dc fe 0d		        CP CR                           ;WAS LAST ONE A CR? 
15de e1			        POP HL                          ;RETURN ADDRESS 
15df ca 46 11		        JP Z,RUNNXL                     ;WAS CR, RUN NEXT LINE 
15e2			QT2: 
15e2 23			        INC HL                          ;SKIP 2 BYTES ON RETURN 
15e3 23			        INC HL 
15e4 e9			        JP (HL)                         ;RETURN 
15e5			QT3: 
15e5 cd 06 10		        CALL RST08                         ;IS IT A '? 
15e8 27			        DB 27H 
15e9 04			        DB QT4-$-1 
15ea 3e 27		        LD A,27H                        ;YES, DO THE SAME 
15ec 18 eb		        JR QT1                          ;AS IN " 
15ee			QT4: 
15ee cd 06 10		        CALL RST08                         ;IS IT UNDERSCORE? 
15f1 ..			        DB "_" 
15f2 0d			        DB QT5-$-1 
15f3 3e 0d		        LD A,CR                            ;YES, CR WITHOUT LF 
15f5 cd 10 10		        CALL RST10                         ;DO IT TWICE TO GIVE 
15f8 3e 0b		        LD A,VT                            ;YES, CR WITHOUT LF 
15fa cd 10 10		        CALL RST10                         ;TTY ENOUGH TIME 
15fd e1			        POP HL                          ;RETURN ADDRESS 
15fe 18 e2		        JR QT2 
1600			QT5: 
1600 c9			        RET                             ;NONE OF ABOVE 
1601			; 
1601			PRTNUM: 
1601 06 00		        LD B,00H                        ;*** PRTNUM *** 
1603 cd d9 14		        CALL CHKSGN                     ;CHECK SIGN 
1606 f2 0c 16		        JP P,PN1                        ;NO SIGN 
1609 06 2d		        LD B,'-'                        ;B=SIGN 
160b 0d			        DEC C                           ;'-' TAKES SPACE 
160c			PN1: 
160c d5			        PUSH DE                         ;SAVE 
160d 11 0a 00		        LD DE,000AH                     ;DECIMAL 
1610 d5			        PUSH DE                         ;SAVE AS FLAG 
1611 0d			        DEC C                           ;C=SPACES 
1612 c5			        PUSH BC                         ;SAVE SIGN & SPACE 
1613			PN2: 
1613 cd bd 14		        CALL DIVIDE                     ;DIVIDE HL BY 10 
1616 78			        LD A,B                          ;RESULT 0? 
1617 b1			        OR C 
1618 28 07		        JR Z,PN3                        ;YES, WE GOT ALL 
161a e3			        EX (SP),HL                      ;NO, SAVE REMAINDER 
161b 2d			        DEC L                           ;AND COUNT SPACE 
161c e5			        PUSH HL                         ;HL IS OLD BC 
161d 60			        LD H,B                          ;MOVE RESULT TO BC 
161e 69			        LD L,C 
161f 18 f2		        JR PN2                          ;AND DIVIDE BY 10 
1621			PN3: 
1621 c1			        POP BC                          ;WE GOT ALL DIGITS IN 
1622			PN4: 
1622 0d			        DEC C                           ;THE STACK 
1623 79			        LD A,C                          ;LOOK AT SPACE COUNT 
1624 b7			        OR A 
1625 fa 2f 16		        JP M,PN5                        ;NO LEADING BLANKS 
1628 3e 20		        LD A,20H                        ;LEADING BLANKS 
162a cd 10 10		        CALL RST10 
162d 18 f3		        JR PN4                          ;MORE? 
162f			PN5: 
162f 78			        LD A,B                          ;PRINT SIGN 
1630 b7			        OR A 
1631 c4 10 10		        CALL NZ,RST10 
1634 5d			        LD E,L                          ;LAST REMAINDER IN E 
1635			PN6: 
1635 7b			        LD A,E                          ;CHECK DIGIT IN E 
1636 fe 0a		        CP 0AH                          ;10 IS FLAG FOR NO MORE 
1638 d1			        POP DE 
1639 c8			        RET Z                           ;IF SO, RETURN 
163a c6 30		        ADD A,30H                       ;ELSE, CONVERT TO ASCII 
163c cd 10 10		        CALL RST10                         ;PRINT THE DIGIT 
163f 18 f4		        JR PN6                          ;GO BACK FOR MORE 
1641			PRTLN: 
1641 1a			        LD A,(DE)                       ;*** PRTLN *** 
1642 6f			        LD L,A                          ;LOW ORDER LINE # 
1643 13			        INC DE 
1644 1a			        LD A,(DE)                       ;HIGH ORDER 
1645 67			        LD H,A 
1646 13			        INC DE 
1647 0e 04		        LD C,04H                        ;PRINT 4 DIGIT LINE # 
1649 cd 01 16		        CALL PRTNUM 
164c 3e 20		        LD A,20H                        ;FOLLOWED BY A BLANK 
164e cd 10 10		        CALL RST10 
1651 97			        SUB A                           ;AND THEN THE NEXT 
1652 c3 c5 15		        JP PRTSTG 
1655			PRTCHR: 
1655 7d			        LD A,L                          ;GET THE NUMBER 
1656 e6 7f		        AND DEL                         ;ONLY LOOK AT 0-128 
1658			PC1: 
1658 c3 10 10		        JP RST10                        ;PRINT VALUE IN A 
165b			PRTASC: 
165b 7d			        LD A,L                          ;GET THE NUMBER 
165c fe 20		        CP SPACE                        ;IS IT LOWER THAN ' ' ? 
165e 38 04		        JR C,PA1                        ;YES 
1660 fe 7f		        CP DEL                          ;IS IT HIGHER THAN '~' ? 
1662 38 f4		        JR C,PC1                        ;NO 
1664			PA1: 
1664 3e 2e		        LD A,"."                        ;DISPLAY A . IF NON PRINTABLE 
1666 18 f0		        JR PC1 
1668			PRTHEX: 
1668 7c			        LD A,H 
1669 b7			        OR A 
166a 28 03		        JR Z,PH1 
166c cd 70 16		        CALL A2HEX 
166f			PH1: 
166f 7d			        LD A,L 
1670			A2HEX: 
1670 f5			        PUSH AF                         ;SAVE A FOR SECOND NIBBLE 
1671 0f			        RRCA                            ;SHIFT HIGH NIBBLE ACROSS 
1672 0f			        RRCA                            ; 
1673 0f			        RRCA                            ; 
1674 0f			        RRCA                            ; 
1675 cd 79 16		        CALL PH2                        ;CALL NIBBLE CONVERTER 
1678 f1			        POP AF                          ;RECOVER LOW NIBBLE 
1679			PH2: 
1679 e6 0f		        AND 0FH                         ;MASK OFF HIGH NIBBLE 
167b c6 90		        ADD A,90H                       ;CONVERT TO 
167d 27			        DAA                             ;ASCII 
167e ce 40		        ADC A,40H                       ;USING THIS 
1680 27			        DAA                             ;AMAZING ROUTINE 
1681 c3 10 10		        JP RST10                        ;DONE 
1684			 
1684			;************************************************************* 
1684			; 
1684			; *** MVUP *** MVDOWN *** POPA *** & PUSHA *** 
1684			; 
1684			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL 
1684			; DE = HL 
1684			; 
1684			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL-> 
1684			; UNTIL DE = BC 
1684			; 
1684			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE 
1684			; STACK 
1684			; 
1684			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE 
1684			; STACK 
1684			;************************************************************* 
1684			 
1684			MVUP: 
1684 cd 1f 10		        CALL RST20                         ;*** MVUP *** 
1687 c8			        RET Z                           ;DE = HL, RETURN 
1688 1a			        LD A,(DE)                       ;GET ONE BYTE 
1689 02			        LD (BC),A                       ;MOVE IT 
168a 13			        INC DE                          ;INCREASE BOTH POINTERS 
168b 03			        INC BC 
168c 18 f6		        JR MVUP                         ;UNTIL DONE 
168e			MVDOWN: 
168e 78			        LD A,B                          ;*** MVDOWN *** 
168f 92			        SUB D                           ;TEST IF DE = BC 
1690 c2 96 16		        JP NZ,MD1                       ;NO, GO MOVE 
1693 79			        LD A,C                          ;MAYBE, OTHER BYTE? 
1694 93			        SUB E 
1695 c8			        RET Z                           ;YES, RETURN 
1696			MD1: 
1696 1b			        DEC DE                          ;ELSE MOVE A BYTE 
1697 2b			        DEC HL                          ;BUT FIRST DECREASE 
1698 1a			        LD A,(DE)                       ;BOTH POINTERS AND 
1699 77			        LD (HL),A                       ;THEN DO IT 
169a 18 f2		        JR MVDOWN                       ;LOOP BACK 
169c			POPA: 
169c c1			        POP BC                          ;BC = RETURN ADDR. 
169d e1			        POP HL                          ;RESTORE LOPVAR, BUT 
169e 22 09 20		        LD (LOPVAR),HL                  ;=0 MEANS NO MORE 
16a1 7c			        LD A,H 
16a2 b5			        OR L 
16a3 28 10		        JR Z,PP1                        ;YEP, GO RETURN 
16a5 e1			        POP HL                          ;NOP, RESTORE OTHERS 
16a6 22 0b 20		        LD (LOPINC),HL 
16a9 e1			        POP HL 
16aa 22 0d 20		        LD (LOPLMT),HL 
16ad e1			        POP HL 
16ae 22 0f 20		        LD (LOPLN),HL 
16b1 e1			        POP HL 
16b2 22 11 20		        LD (LOPPT),HL 
16b5			PP1: 
16b5 c5			        PUSH BC                         ;BC = RETURN ADDR. 
16b6 c9			        RET 
16b7			PUSHA: 
16b7 21 88 3f		        LD HL,STKLMT                    ;*** PUSHA *** 
16ba cd dc 14		        CALL CHGSGN 
16bd c1			        POP BC                          ;BC=RETURN ADDRESS 
16be 39			        ADD HL,SP                       ;IS STACK NEAR THE TOP? 
16bf d2 58 15		        JP NC,QSORRY                    ;YES, SORRY FOR THAT 
16c2 2a 09 20		        LD HL,(LOPVAR)                  ;ELSE SAVE LOOP VAR'S 
16c5 7c			        LD A,H                          ;BUT IF LOPVAR IS 0 
16c6 b5			        OR L                            ;THAT WILL BE ALL 
16c7 28 13		        JR Z,PU1 
16c9 2a 11 20		        LD HL,(LOPPT)                   ;ELSE, MORE TO SAVE 
16cc e5			        PUSH HL 
16cd 2a 0f 20		        LD HL,(LOPLN) 
16d0 e5			        PUSH HL 
16d1 2a 0d 20		        LD HL,(LOPLMT) 
16d4 e5			        PUSH HL 
16d5 2a 0b 20		        LD HL,(LOPINC) 
16d8 e5			        PUSH HL 
16d9 2a 09 20		        LD HL,(LOPVAR) 
16dc			PU1: 
16dc e5			        PUSH HL 
16dd c5			        PUSH BC                         ;BC = RETURN ADDR. 
16de c9			        RET 
16df			;************************************************************* 
16df			; 
16df			; *** OUTC *** OUTP *** XON *** XOFF *** CHKIO *** 
16df			; 
16df			; THESE ARE THE ONLY I/O ROUTINES IN TBI. 
16df			; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0 
16df			; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0, 
16df			; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO 
16df			; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG. 
16df			; ARE RESTORED. 
16df			; 
16df			; 'OUTP' LETS THE USER SEND DATA TO AN OUTPUT PORT ON THE 
16df			; CONTROLING HARDWARE.  THE FORMAT IS 'OUT <PORT>,<DATA>' 
16df			; WHERE <PORT> IS THE PORT NUMBER AND <DATA> IS THE DATA 
16df			; TO OUTPUT.  BOTH PORT NUMBER AND DATA ARE EXPRESIONS AND 
16df			; ARE TO BE LESS THAN 256.   
16df			; 
16df			; 'XON' AND 'XOFF' PROGRAMATICALLY TURN ON OR OFF THE  
16df			; OUTPUT SWITCH.  THIS IS THE SAME AS PRESSING CONTROL-O 
16df			; ON THE KEYBOARD.  THE CAN BE USED TO DISABLE TX_RDY, 
16df			; THE SERIAL OUTPUT ROUTINE, IF THE SAME PORT IS BEING  
16df			; USED. 
16df			; 
16df			; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO 
16df			; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG 
16df			; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE 
16df			; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND 
16df			; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL 
16df			; RESTART TBI AND DO NOT RETURN TO THE CALLER. 
16df			; 
16df			; Do not modify these routines.  Routines requiring 
16df			; modification are : SERIAL_INIT, RX_RDY, and TX_RDY. 
16df			;************************************************************* 
16df			 
16df			INIT: 
16df cd 6c 18		        CALL SERIAL_INIT        ;INITIALIZE THE SIO 
16e2 af			        XOR A 
16e3 11 6a 17		        LD DE,MSG1          ;PRINT THE BOOT MESSAGES 
16e6 cd c5 15		        CALL PRTSTG 
16e9 af			        XOR A 
16ea 11 7f 17		        LD DE,MSG2 
16ed cd c5 15		        CALL PRTSTG 
16f0 21 00 10		        LD HL,START 
16f3 22 13 20		        LD (RANPNT),HL 
16f6 21 17 20		        LD HL,TXTBGN 
16f9 22 15 20		        LD (TXTUNF),HL 
16fc c3 b3 10		        JP RSTART 
16ff			OUTC: 
16ff 20 02		        JR NZ,OUTC2                     ;IT IS ON 
1701 f1			        POP AF                          ;IT IS OFF 
1702 c9			        RET                             ;RESTORE AF AND RETURN 
1703			OUTC2: 
1703 f1			        POP AF                          ;RESTORE THE REGISTER          
1704 cd 77 18		        CALL TX_RDY                     ;SEND THE BYTE 
1707 fe 0d		        CP CR 
1709 c0			        RET NZ 
170a 3e 0a		        LD A,LF 
170c cd 10 10		        CALL RST10 
170f 3e 0d		        LD A,CR 
1711 c9			        RET 
1712			OUTP: 
1712 cd 18 10		        CALL RST18                      ;GET PORT NUMBER 
1715 af			        XOR A                           ;IS PORT > 255? 
1716 bc			        CP H 
1717 c2 98 10		        JP NZ,QHOW                      ;YES, NOT A VALID PORT 
171a cd 06 10		        CALL RST08                      ;IF "," THEN GET DATA 
171d ..			        DB ',' 
171e 11			        DB OT1-$-1 
171f e5			        PUSH HL 
1720 cd 18 10		        CALL RST18                      ;GET DATA TO OUTPUT 
1723 af			        XOR A                           ;IS DATA > 255? 
1724 bc			        CP H 
1725 c2 98 10		        JP NZ,QHOW                      ;YES, NOT A DATA VALUE 
1728 7d			        LD A,L                          ;RETRIVE DATA 
1729 e1			        POP HL 
172a 4d			        LD C,L                          ;RETRIVE PORT 
172b ed 79		        OUT (C),A                       ;SEND IT OUT 
172d cd 2c 10		        CALL RST30 
1730			OT1: 
1730 c3 29 15		        JP QWHAT 
1733			XON: 
1733 3e ff		        LD A,0FFH                       ;SET SWTICH TO ON 
1735 18 01		        JR XO1 
1737			XOFF: 
1737 af			        XOR A                           ;SET SWITCH TO OFF 
1738			XO1: 
1738 32 00 20		        LD (OCSW),A                   ;SAVE NEW SWITCH 
173b cd 2c 10		        CALL RST30                      ;CONTINUE 
173e			CHKIO: 
173e cd a2 18		        CALL RX_RDY                     ;CHECK IF CHARACTER AVAILABLE 
1741 c8			        RET Z                           ;RETURN IF NO CHARACTER AVAILABLE 
1742			 
1742 c5			        PUSH BC                         ;IF IT'S A LF, IGNORE AND RETURN 
1743 47			        LD B,A                          ; AS IF THERE WAS NO CHARACTER. 
1744 d6 0a		        SUB LF 
1746 28 0f		        JR Z,CHKIO2 
1748 78			        LD A,B                          ;OTHERWISE RESTORE 'A' AND 'BC' 
1749 c1			        POP BC                          ; AND CONTINUE ON. 
174a			 
174a fe 0f		        CP CTRLO                        ;IS IT CONTROL-0? 
174c 20 0c		        JR NZ,CI1                       ;NO, MORE CHECKING 
174e 3a 00 20		        LD A,(OCSW)                     ;CONTROL-0 FLIPS OCSW 
1751 2f			        CPL                             ;ON TO OFF, OFF TO ON 
1752 32 00 20		        LD (OCSW),A 
1755 18 e7		        JR CHKIO                        ;GET ANOTHER INPUT 
1757			CHKIO2: 
1757 af			        XOR A                           ;CLEAR A 
1758 c1			        POP BC                          ;RESTORE THE 'BC' PAIR 
1759 c9			        RET                             ;RETURN WITH 'Z' SET. 
175a			 
175a			CI1: 
175a fe 61		        CP 61H                          ;IS IT LOWER THAN 'a' ? 
175c 38 06		        JR C,CI2                        ;YES 
175e fe 7b		        CP 7BH                          ;IS IT HIGHT THAN 'z' ? 
1760 30 02		        JR NC,CI2                       ;YES 
1762 e6 df		        AND 0DFH                        ;MAKE IT UPPER CASE 
1764			CI2: 
1764 fe 03		        CP CTRLC                        ;IS IT CONTROL-C? 
1766 c0			        RET NZ                          ;NO, RETURN "NZ" 
1767 c3 b3 10		        JP RSTART                       ;YES, RESTART TBI 
176a			 
176a			 
176a 0c .. 0d		MSG1:   DB   CS,'Z80 TINY BASIC 2.1b',CR       ;CLEAR SCREEN AND BOOT MESSAGE 
177f .. 0d		MSG2:   DB   'TEC-1F VERSION BY B CHIHA, 2022',CR 
179f			 
179f			;************************************************************* 
179f			; 
179f			; *** TABLES *** DIRECT *** & EXEC *** 
179f			; 
179f			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE. 
179f			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION 
179f			; OF CODE ACCORDING TO THE TABLE. 
179f			; 
179f			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT 
179f			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING. 
179f			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF 
179f			; ALL DIRECT AND STATEMENT COMMANDS. 
179f			; 
179f			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL 
179f			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.', 
179f			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'. 
179f			; 
179f			; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM 
179f			; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND 
179f			; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH 
179f			; BYTE SET TO 1. 
179f			; 
179f			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE 
179f			; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL 
179f			; MATCH THIS NULL ITEM AS DEFAULT. 
179f			;************************************************************* 
179f			 
179f			TAB1:                                   ;DIRECT COMMANDS 
179f ..			        DB 'LIST' 
17a3			        DWA LIST 
17a3 91			        DB   (LIST >> 8) + 128 
17a4 6f			        DB   LIST & 0FFH 
17a5			        ENDM 
# End of macro DWA
17a5 ..			        DB 'RUN' 
17a8			        DWA RUN 
17a8 91			        DB   (RUN >> 8) + 128 
17a9 40			        DB   RUN & 0FFH 
17aa			        ENDM 
# End of macro DWA
17aa ..			        DB 'NEW' 
17ad			        DWA NEW 
17ad 91			        DB   (NEW >> 8) + 128 
17ae 31			        DB   NEW & 0FFH 
17af			        ENDM 
# End of macro DWA
17af			TAB2:                                   ;DIRECT/STATEMENT 
17af ..			        DB 'NEXT' 
17b3			        DWA NEXT 
17b3 92			        DB   (NEXT >> 8) + 128 
17b4 89			        DB   NEXT & 0FFH 
17b5			        ENDM 
# End of macro DWA
17b5 ..			        DB 'LET' 
17b8			        DWA LET 
17b8 93			        DB   (LET >> 8) + 128 
17b9 62			        DB   LET & 0FFH 
17ba			        ENDM 
# End of macro DWA
17ba ..			        DB 'IF' 
17bc			        DWA IFF 
17bc 92			        DB   (IFF >> 8) + 128 
17bd ec			        DB   IFF & 0FFH 
17be			        ENDM 
# End of macro DWA
17be ..			        DB 'GOTO' 
17c2			        DWA GOTO 
17c2 91			        DB   (GOTO >> 8) + 128 
17c3 5f			        DB   GOTO & 0FFH 
17c4			        ENDM 
# End of macro DWA
17c4 ..			        DB 'GOSUB' 
17c9			        DWA GOSUB 
17c9 91			        DB   (GOSUB >> 8) + 128 
17ca ed			        DB   GOSUB & 0FFH 
17cb			        ENDM 
# End of macro DWA
17cb ..			        DB 'RETURN' 
17d1			        DWA RETURN 
17d1 92			        DB   (RETURN >> 8) + 128 
17d2 0f			        DB   RETURN & 0FFH 
17d3			        ENDM 
# End of macro DWA
17d3 ..			        DB 'REM' 
17d6			        DWA REM 
17d6 92			        DB   (REM >> 8) + 128 
17d7 e7			        DB   REM & 0FFH 
17d8			        ENDM 
# End of macro DWA
17d8 ..			        DB 'FOR' 
17db			        DWA FOR 
17db 92			        DB   (FOR >> 8) + 128 
17dc 2a			        DB   FOR & 0FFH 
17dd			        ENDM 
# End of macro DWA
17dd ..			        DB 'INPUT' 
17e2			        DWA INPUT 
17e2 93			        DB   (INPUT >> 8) + 128 
17e3 07			        DB   INPUT & 0FFH 
17e4			        ENDM 
# End of macro DWA
17e4 ..			        DB 'PRINT' 
17e9			        DWA PRINT 
17e9 91			        DB   (PRINT >> 8) + 128 
17ea 86			        DB   PRINT & 0FFH 
17eb			        ENDM 
# End of macro DWA
17eb ..			        DB 'OUT' 
17ee			        DWA OUTP 
17ee 97			        DB   (OUTP >> 8) + 128 
17ef 12			        DB   OUTP & 0FFH 
17f0			        ENDM 
# End of macro DWA
17f0 ..			        DB 'STOP' 
17f4			        DWA STOP 
17f4 91			        DB   (STOP >> 8) + 128 
17f5 3a			        DB   STOP & 0FFH 
17f6			        ENDM 
# End of macro DWA
17f6 ..			        DB 'XON' 
17f9			        DWA XON 
17f9 97			        DB   (XON >> 8) + 128 
17fa 33			        DB   XON & 0FFH 
17fb			        ENDM 
# End of macro DWA
17fb ..			        DB 'XOFF' 
17ff			        DWA XOFF 
17ff 97			        DB   (XOFF >> 8) + 128 
1800 37			        DB   XOFF & 0FFH 
1801			        ENDM 
# End of macro DWA
1801			        DWA DEFLT 
1801 93			        DB   (DEFLT >> 8) + 128 
1802 5d			        DB   DEFLT & 0FFH 
1803			        ENDM 
# End of macro DWA
1803			TAB4:                                   ;FUNCTIONS 
1803 ..			        DB 'RND' 
1806			        DWA RND 
1806 94			        DB   (RND >> 8) + 128 
1807 73			        DB   RND & 0FFH 
1808			        ENDM 
# End of macro DWA
1808 ..			        DB 'ABS' 
180b			        DWA ABS 
180b 94			        DB   (ABS >> 8) + 128 
180c 9f			        DB   ABS & 0FFH 
180d			        ENDM 
# End of macro DWA
180d ..			        DB 'PEEK' 
1811			        DWA PEEK 
1811 94			        DB   (PEEK >> 8) + 128 
1812 a8			        DB   PEEK & 0FFH 
1813			        ENDM 
# End of macro DWA
1813 ..			        DB 'SIZE' 
1817			        DWA SIZE 
1817 94			        DB   (SIZE >> 8) + 128 
1818 b0			        DB   SIZE & 0FFH 
1819			        ENDM 
# End of macro DWA
1819			        DWA XP40 
1819 94			        DB   (XP40 >> 8) + 128 
181a 52			        DB   XP40 & 0FFH 
181b			        ENDM 
# End of macro DWA
181b			TAB5:                                   ;"TO" IN "FOR" 
181b ..			        DB 'TO' 
181d			        DWA FR1 
181d 92			        DB   (FR1 >> 8) + 128 
181e 3a			        DB   FR1 & 0FFH 
181f			        ENDM 
# End of macro DWA
181f			        DWA QWHAT 
181f 95			        DB   (QWHAT >> 8) + 128 
1820 29			        DB   QWHAT & 0FFH 
1821			        ENDM 
# End of macro DWA
1821			TAB6:                                   ;"STEP" IN "FOR" 
1821 ..			        DB 'STEP' 
1825			        DWA FR2 
1825 92			        DB   (FR2 >> 8) + 128 
1826 46			        DB   FR2 & 0FFH 
1827			        ENDM 
# End of macro DWA
1827			        DWA FR3 
1827 92			        DB   (FR3 >> 8) + 128 
1828 4b			        DB   FR3 & 0FFH 
1829			        ENDM 
# End of macro DWA
1829			TAB8:                                   ;RELATION OPERATORS 
1829 ..			        DB '>=' 
182b			        DWA XP11 
182b 93			        DB   (XP11 >> 8) + 128 
182c 75			        DB   XP11 & 0FFH 
182d			        ENDM 
# End of macro DWA
182d ..			        DB '#' 
182e			        DWA XP12 
182e 93			        DB   (XP12 >> 8) + 128 
182f 7b			        DB   XP12 & 0FFH 
1830			        ENDM 
# End of macro DWA
1830 ..			        DB '>' 
1831			        DWA XP13 
1831 93			        DB   (XP13 >> 8) + 128 
1832 81			        DB   XP13 & 0FFH 
1833			        ENDM 
# End of macro DWA
1833 ..			        DB '=' 
1834			        DWA XP15 
1834 93			        DB   (XP15 >> 8) + 128 
1835 90			        DB   XP15 & 0FFH 
1836			        ENDM 
# End of macro DWA
1836 ..			        DB '<=' 
1838			        DWA XP14 
1838 93			        DB   (XP14 >> 8) + 128 
1839 88			        DB   XP14 & 0FFH 
183a			        ENDM 
# End of macro DWA
183a ..			        DB '<' 
183b			        DWA XP16 
183b 93			        DB   (XP16 >> 8) + 128 
183c 96			        DB   XP16 & 0FFH 
183d			        ENDM 
# End of macro DWA
183d			        DWA XP17 
183d 93			        DB   (XP17 >> 8) + 128 
183e 9c			        DB   XP17 & 0FFH 
183f			        ENDM 
# End of macro DWA
183f 21 9e 17		DIRECT: LD HL,TAB1-1                   ;*** DIRECT *** 
1842			EXEC:                                   ;*** EXEC *** 
1842 cd 25 10		EX0:    CALL RST28                         ;IGNORE LEADING BLANKS 
1845 d5			        PUSH DE                         ;SAVE POINTER 
1846			EX1: 
1846 1a			        LD A,(DE)                       ;IF FOUND '.' IN STRING 
1847 13			        INC DE                          ;BEFORE ANY MISMATCH 
1848 fe 2e		        CP "."                          ;WE DECLARE A MATCH 
184a 28 12		        JR Z,EX3 
184c 23			        INC HL                          ;HL->TABLE 
184d be			        CP (HL)                         ;IF MATCH, TEST NEXT 
184e 28 f6		        JR Z,EX1 
1850 3e 7f		        LD A,7FH                        ;ELSE SEE IF BIT 7 
1852 1b			        DEC DE                          ;OF TABLE IS SET, WHICH 
1853 be			        CP (HL)                         ;IS THE JUMP ADDR. (HI) 
1854 38 0e		        JR C,EX5                        ;C:YES, MATCHED 
1856			EX2: 
1856 23			        INC HL                          ;NC:NO, FIND JUMP ADDR. 
1857 be			        CP (HL) 
1858 30 fc		        JR NC,EX2 
185a 23			        INC HL                          ;BUMP TO NEXT TAB. ITEM 
185b d1			        POP DE                          ;RESTORE STRING POINTER 
185c 18 e4		        JR EX0                          ;TEST AGAINST NEXT ITEM 
185e			EX3: 
185e 3e 7f		        LD A,7FH                        ;PARTIAL MATCH, FIND 
1860			EX4: 
1860 23			        INC HL                          ;JUMP ADDR., WHICH IS 
1861 be			        CP (HL)                         ;FLAGGED BY BIT 7 
1862 30 fc		        JR NC,EX4 
1864			EX5: 
1864 7e			        LD A,(HL)                       ;LOAD HL WITH THE JUMP 
1865 23			        INC HL                          ;ADDRESS FROM THE TABLE 
1866 6e			        LD L,(HL) 
1867 e6 7f		        AND 7FH                         ;MASK OFF BIT 7 
1869 67			        LD H,A 
186a f1			        POP AF                          ;CLEAN UP THE GABAGE 
186b e9			        JP (HL)                         ;AND WE GO DO IT 
186c			;------------------------------------------------------------------------------- 
186c			;/////////////////////////////////////////////////////////////////////////////// 
186c			;------------------------------------------------------------------------------- 
186c			;COMPUTER SPECIFIC ROUTINES. 
186c			;------------------------------------------------------------------------------- 
186c			SERIAL_INIT: 
186c 21 00 20		        LD HL,2000H                     ;POWER UP DELAY 
186f cd 53 00		        CALL 0053H    
1872 3e 40		        LD A,40H    
1874 d3 01		        OUT (SCAN),A                       ;MAKE THE OUTPUT PORT HIGH 
1876 c9			        RET 
1877			;------------------------------------------------------------------------------- 
1877			TX_RDY: 
1877			 
1877			    ; This routine sends the character to the output port.  Port is always 
1877			    ; ready as init and last part sets output port to high for two stop bits 
1877			 
1877 f5			        PUSH AF    
1878 c5			        PUSH BC    
1879 e5			        PUSH HL    
187a 21 1b 00		        LD HL,BAUD                      ;HL HOLDS THE BIT TIME DELAY 
187d 4f			        LD C,A                          ;STORE CHRACTER IN C FOR BIT SENDING    
187e af			        XOR A                           ;TRANSMIT THE START BIT  
187f d3 01		        OUT (SCAN),A    
1881 cd 53 00		        CALL 0053H    
1884 06 08		        LD B,08H                        ;TRANSMIT 8 BITS OF DATA    
1886 cb 09		        RRC C                           ;SHIFT BIT 0 TO BIT 7 
1888			NXTBIT:       
1888 cb 09		        RRC C                           ;SHIFT BITS TO D6 
188a 79			        LD A,C                          ;SEND FIRST LSB 
188b e6 40		        AND 40H                         ;FOR ONE BIT TIME 
188d d3 01		        OUT (SCAN),A    
188f cd 53 00		        CALL 0053H 
1892 10 f4		        DJNZ NXTBIT                     ;DO FOR ALL BITS 
1894 3e 40		        LD A,40H                        ;SEND THE TWO STOP BITS    
1896 d3 01		        OUT (SCAN),A                               
1898 cd 53 00		        CALL 0053H 
189b cd 53 00		        CALL 0053H 
189e e1			        POP HL    
189f c1			        POP BC    
18a0 f1			        POP AF    
18a1 c9			        RET 
18a2			 
18a2			;------------------------------------------------------------------------------- 
18a2			RX_RDY: 
18a2			 
18a2			    ; This routine is for checkif if a character is available over 
18a2			    ; serial. If a character is available, it returns to the calling 
18a2			    ; function with the character in 'A' and the Z-flag reset. 
18a2			    ; However, if a character is not available, it returns with the 
18a2			    ; Z-flag set. 
18a2			 
18a2 c5			        PUSH BC    
18a3 e5			        PUSH HL 
18a4 06 20		        LD B,20H                        ;CHECK FOR START BIT 20H TIMES BEFORE EXITING 
18a6			STARTBIT:       
18a6 db 00		        IN A,(KEYBUF)    
18a8 cb 7f		        BIT 7,A    
18aa 28 05		        JR Z,GETCHAR                    ;START BIT FOUND, GET CHARACTER 
18ac 10 f8		        DJNZ STARTBIT                   ;KEEP CHECKING FOR START BIT 
18ae af			        XOR A                           ;SET ZERO FLAG 
18af 18 22		        JR RX_EXIT                      ;EXIT 
18b1			 
18b1			GETCHAR:                                ;START BIT DETECTED 
18b1 21 1b 00		        LD HL,BAUD                      ;DELAY FOR HALF A 
18b4 cb 3c		        SRL H                           ;BIT TIME TO SAMPLE THE MIDDLE 
18b6 cb 1d		        RR L                            ;OF THE BIT CELL 
18b8 cd 53 00		        CALL 0053H    
18bb db 00		        IN A,(KEYBUF)    
18bd cb 7f		        BIT 7,A                         ;CHECK THE START BIT IS STILL LOW 
18bf 20 e5		        JR NZ,STARTBIT 
18c1			    
18c1 06 08		        LD B,08H                        ;VALID START BIT DETECTED 
18c3			GETBITS:       
18c3 21 1b 00		        LD HL,BAUD    
18c6 cd 53 00		        CALL 0053H                     ;DELAY FOR ONE FULL BIT TIME 
18c9 db 00		        IN A,(KEYBUF)    
18cb cb 17		        RL A    
18cd cb 19		        RR C                            ;SHIFT BIT INTO OUTPUT REGISTER 
18cf 10 f2		        DJNZ GETBITS    
18d1 79			        LD A,C    
18d2 b7			        OR A                            ;CLEAR CARRY FLAG AND RESET ZERO FLAG 
18d3			RX_EXIT: 
18d3 e1			        POP HL    
18d4 c1			        POP BC 
18d5 c9			        RET 
18d6			 
18d6 00...		        DS 0AH                          ;FILL TO MAKE EVEN 
18e0			;------------------------------------------------------------------------------- 
18e0			 
18e0			;/////////////////////////////////////////////////////////////////////////////// 
18e0			;------------------------------------------------------------------------------- 
18e0			 
18e0			LSTROM:                                 ;ALL ABOVE CAN BE ROM 
18e0			                    ;HERE DOWN MUST BE RAM 
18e0			        END 
# End of file /Users/slarti/Documents/TEC1x/TEC-1D-Stuff/code/bmon/tiny_basic.z80
18e0
